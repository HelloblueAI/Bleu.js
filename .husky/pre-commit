#!/usr/bin/env bash
# vim: filetype=sh

# Function to handle errors
handle_error() {
    echo "‚ùå Error: $1"
    exit 1
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get the virtual environment path
get_venv_path() {
    if [ -d "bleujs-env" ]; then
        echo "bleujs-env"
    elif [ -d ".venv" ]; then
        echo ".venv"
    elif [ -d "venv" ]; then
        echo "venv"
    else
        echo ""
    fi
}

# Function to activate virtual environment
activate_venv() {
    local venv_path=$(get_venv_path)
    if [ -n "$venv_path" ]; then
        if [ -f "$venv_path/bin/activate" ]; then
            . "$venv_path/bin/activate"
            echo "‚úÖ Activated virtual environment: $venv_path"
        else
            handle_error "Virtual environment found but activate script missing"
        fi
    else
        echo "‚ö†Ô∏è No virtual environment found, using system Python"
    fi
}

# Function to check Python version
check_python_version() {
    if command_exists python3; then
        local version=$(python3 -c 'import sys; print(sys.version_info[0] * 100 + sys.version_info[1])')
        if [ "$version" -ge 308 ]; then
            echo "‚úÖ Python version $(python3 --version) meets requirements"
        else
            handle_error "Python version $(python3 --version) is below required version 3.8"
        fi
    else
        handle_error "Python3 not found"
    fi
}

# Function to check if pre-commit is installed
check_precommit() {
    if command_exists pre-commit; then
        echo "‚úÖ pre-commit is installed"
    else
        handle_error "pre-commit is not installed. Please install it with: pip install pre-commit"
    fi
}

# Function to check if dependencies are installed
check_dependencies() {
    local missing_deps=()
    local required_deps=("flake8" "black" "isort" "mypy" "ruff" "bandit")
    
    for dep in "${required_deps[@]}"; do
        if ! command_exists "$dep"; then
            missing_deps+=("$dep")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo "‚ö†Ô∏è Missing dependencies: ${missing_deps[*]}"
        echo "Installing missing dependencies..."
        pip install "${missing_deps[@]}"
    fi
}

# Function to run tests with caching
run_tests() {
    local cache_dir=".pytest_cache"
    local test_files=$(git diff --cached --name-only --diff-filter=d | grep "\.py$")
    
    if [ -n "$test_files" ]; then
        echo "üîç Running tests for changed files..."
        if [ -d "$cache_dir" ]; then
            pytest --cache-clear "$test_files"
        else
            pytest "$test_files"
        fi
    else
        echo "‚ÑπÔ∏è No Python files changed, skipping tests"
    fi
}

# Main execution
echo "üöÄ Starting pre-commit checks..."

# Check Python version
check_python_version

# Check pre-commit installation
check_precommit

# Activate virtual environment
activate_venv

# Check dependencies
check_dependencies

# Run pre-commit hooks
echo "üîç Running pre-commit hooks..."
pre-commit run --hook-stage pre-commit --all-files || true

# Run tests for changed files
run_tests || true

echo "‚úÖ Pre-commit checks completed successfully"
