[package]
name = "bleu-optimizer"
version = "0.1.0"
edition = "2021"
authors = ["Bleu.js Team"]
description = "Enterprise-grade quantum-enhanced WASM optimizer with distributed processing, AI acceleration, military-grade security, cloud-native capabilities, and advanced edge computing"
license = "MIT"
repository = "https://github.com/bleujs/core-engine"
keywords = ["wasm", "quantum", "optimization", "distributed", "simd", "ai", "ml", "gpu", "neural", "deep-learning", "enterprise", "security", "cloud", "edge", "kubernetes", "serverless", "microservices", "blockchain", "iot", "5g", "6g"]
categories = ["wasm", "optimization", "quantum-computing", "artificial-intelligence", "deep-learning", "gpu-computing", "enterprise", "security", "cloud-native", "microservices", "blockchain", "iot"]

[lib]
crate-type = ["cdylib", "rlib", "staticlib"]

[dependencies]
# Core WASM dependencies
wasm-bindgen = { version = "0.2", features = ["serde-serialize", "threads"] }
wasm-bindgen-futures = "0.4"
js-sys = "0.3"
web-sys = { version = "0.3", features = [
    "console", "WebAssembly", "SharedArrayBuffer", "Worker",
    "WorkerGlobalScope", "MessageEvent", "DedicatedWorkerGlobalScope",
    "Performance", "PerformanceEntry", "PerformanceMark", "PerformanceMeasure",
    "WebGL2RenderingContext", "WebGLBuffer", "WebGLProgram", "WebGLShader",
    "WebGLTexture", "WebGLUniformLocation", "WebGLVertexArrayObject",
    "WebGLTransformFeedback", "WebGLQuery", "WebGLSampler", "WebGLSync",
    "WebGL2RenderingContext", "WebGL2ComputeRenderingContext",
    "WebGPUDevice", "WebGPUAdapter", "WebGPUCommandEncoder",
    "WebGPUComputePassEncoder", "WebGPUBuffer", "WebGPUTexture",
    "WebGPUShaderModule", "WebGPUPipelineLayout", "WebGPUComputePipeline",
    "WebGPUCommandBuffer", "WebGPUQueue", "WebGPUDeviceDescriptor",
    "WebGPUAdapterDescriptor", "WebGPUFeatureName", "WebGPULimits",
    "WebGPUExtent3D", "WebGPUOrigin3D", "WebGPUColor", "WebGPUBlendFactor",
    "WebGPUBlendOperation", "WebGPUStencilOperation", "WebGPUCompareFunction",
    "WebGPUCullMode", "WebGPUFrontFace", "WebGPUPrimitiveTopology",
    "WebGPUIndexFormat", "WebGPUVertexFormat", "WebGPUVertexStepMode",
    "WebGPUAddressMode", "WebGPUFilterMode", "WebGPUMipmapFilterMode"
] }

# Enterprise AI and Quantum Computing
qcs = { version = "0.1", features = ["quantum-optimization", "quantum-error-correction", "quantum-simulation", "quantum-visualization"] }
quantum = { version = "0.1", features = ["quantum-gates", "quantum-circuits", "quantum-algorithms", "quantum-visualization", "quantum-error-correction"] }
qiskit = { version = "0.1", features = ["quantum-simulation", "quantum-visualization", "quantum-optimization", "quantum-error-correction"] }
quantum-circuit = { version = "0.1", features = ["quantum-optimization", "quantum-error-correction", "quantum-simulation", "quantum-visualization"] }

# Enterprise AI Models
tch = { version = "0.13", features = ["download-libtorch", "cuda", "mkl", "openmp", "tensorrt", "cudnn", "distributed", "quantized"] }
onnxruntime = { version = "0.0.14", features = ["cuda", "tensorrt", "cudnn", "mkl", "distributed", "quantized"] }
tensorflow = { version = "0.17", features = ["gpu", "cuda", "tensorrt", "cudnn", "mkl", "distributed", "quantized"] }
rust-bert = { version = "0.20", features = ["gpu", "quantized", "transformer-xl", "distributed"] }
tokenizers = { version = "0.13", features = ["parallel", "fast", "distributed", "quantized"] }
rust-embeddings = { version = "0.1", features = ["gpu", "quantized", "fast", "distributed"] }

# Enterprise Distributed Computing
raft = { version = "0.6", features = ["async-std", "metrics", "security", "distributed"] }
consul = { version = "0.1", features = ["async-std", "metrics", "security", "distributed"] }
etcd-client = { version = "0.9", features = ["async-std", "metrics", "security", "distributed"] }
grpcio = { version = "0.10", features = ["async", "tls", "compression", "security", "distributed"] }
tonic = { version = "0.9", features = ["transport", "codegen", "prost", "tls", "compression", "security", "distributed"] }
tower = { version = "0.4", features = ["full", "metrics", "security", "distributed"] }
tower-http = { version = "0.4", features = ["trace", "cors", "auth", "metrics", "security", "distributed"] }

# Enterprise Performance Optimization
bytes = { version = "1.4", features = ["fast", "zero-copy", "simd"] }
encoding_rs = { version = "0.8", features = ["simd", "fast", "zero-copy"] }
regex = { version = "1.9", features = ["simd", "fast", "zero-copy"] }
lazy_static = "1.4"
memchr = { version = "2.5", features = ["simd", "fast", "zero-copy"] }
aho-corasick = { version = "1.0", features = ["simd", "fast", "zero-copy"] }
simd-json = { version = "0.4", features = ["fast", "zero-copy", "simd"] }
simdutf8 = { version = "0.4", features = ["fast", "zero-copy", "simd"] }
simd-adler32 = { version = "0.3", features = ["fast", "zero-copy", "simd"] }
packed_simd = { version = "0.3", features = ["fast", "zero-copy", "simd"] }
simdeez = { version = "1.0", features = ["fast", "zero-copy", "simd"] }

# Enterprise Security and Cryptography
ring = { version = "0.17", features = ["std", "test_logging", "alloc", "security", "distributed"] }
getrandom = { version = "0.2", features = ["js", "std", "alloc", "security", "distributed"] }
rand = { version = "0.8", features = ["std", "std_rng", "alloc", "security", "distributed"] }
rand_chacha = { version = "0.3", features = ["std", "security", "distributed"] }
rand_core = { version = "0.6", features = ["std", "security", "distributed"] }
rand_distr = { version = "0.4", features = ["std", "security", "distributed"] }

# Enterprise Monitoring and Observability
metrics = { version = "0.20", features = ["std", "fast", "security", "distributed"] }
metrics-exporter-prometheus = { version = "0.12", features = ["std", "fast", "security", "distributed"] }
tracing = { version = "0.1", features = ["std", "fast", "security", "distributed"] }
tracing-subscriber = { version = "0.3", features = ["env-filter", "fast", "security", "distributed"] }
opentelemetry = { version = "0.19", features = ["rt-tokio", "trace", "fast", "security", "distributed"] }
opentelemetry-jaeger = { version = "0.19", features = ["collector_client", "fast", "security", "distributed"] }
opentelemetry-zipkin = { version = "0.19", features = ["reqwest-client", "fast", "security", "distributed"] }
opentelemetry-datadog = { version = "0.19", features = ["reqwest-client", "fast", "security", "distributed"] }

# Serialization and data handling
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"
msgpack = "0.3"
protobuf = "3.2"

# Error handling and logging
thiserror = "1.0"
log = "0.4"
env_logger = "0.10"
anyhow = "1.0"

# Concurrency and async
rayon = "1.7"
parking_lot = "0.12"
futures = "0.3"
tokio = { version = "1.0", features = ["full", "macros", "rt-multi-thread"] }
async-trait = "0.1"
crossbeam = "0.8"
dashmap = "5.4"

# Unicode handling
unicode-segmentation = "1.10"
unicode-width = "0.1"
unicode-normalization = "0.1"
unicode-xid = "0.2"
unicode-bidi = "0.3"
unicode-linebreak = "0.1"
unicode-script = "0.5"
unicode-general-category = "0.6"
unicode-ident = "1.0"

# Testing and development
wasm-bindgen-test = "0.3"
criterion = "0.5"
proptest = "1.1"
quickcheck = "1.0"
mockall = "0.11"
test-log = "0.2"

[dev-dependencies]
wasm-bindgen-test = "0.3"
criterion = "0.5"
proptest = "1.1"
quickcheck = "1.0"
mockall = "0.11"
test-log = "0.2"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = 'abort'
strip = true
incremental = false
debug = false
debug-assertions = false
overflow-checks = false
rpath = false

[profile.dev]
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
incremental = true

[profile.test]
opt-level = 1
debug = true
debug-assertions = true
overflow-checks = true
incremental = true

[profile.bench]
opt-level = 3
debug = false
debug-assertions = false
overflow-checks = false
incremental = false

[workspace]
members = [
    "core-engine",
    "quantum-engine",
    "distributed-engine",
    "optimization-engine",
    "security-engine",
    "monitoring-engine",
    "cloud-engine",
    "edge-engine",
    "blockchain-engine",
    "iot-engine"
]

[features]
default = ["quantum", "distributed", "simd", "security", "ai", "monitoring", "gpu", "fast", "enterprise", "cloud-native", "blockchain", "iot"]
quantum = ["qcs", "quantum", "qiskit", "quantum-circuit"]
distributed = ["raft", "consul", "etcd-client", "grpcio", "tonic"]
simd = ["packed_simd", "simdeez", "simd-json", "simdutf8", "simd-adler32"]
security = ["ring", "getrandom", "rand"]
ai = ["tch", "onnxruntime", "tensorflow", "rust-bert", "tokenizers", "rust-embeddings"]
monitoring = ["metrics", "metrics-exporter-prometheus", "tracing", "opentelemetry"]
gpu = ["tch/cuda", "onnxruntime/cuda", "tensorflow/gpu", "rust-bert/gpu"]
fast = ["bytes/fast", "encoding_rs/simd", "regex/simd", "memchr/simd", "aho-corasick/simd"]
enterprise = ["security", "monitoring", "distributed", "ai", "quantum"]
cloud-native = ["kubernetes", "serverless", "microservices"]
blockchain = ["ethereum", "solana", "polkadot"]
iot = ["mqtt", "coap", "lora"]
testing = ["criterion", "proptest", "quickcheck", "mockall"] 