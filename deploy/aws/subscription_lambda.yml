AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bleu.js Subscription Management Lambda'

Resources:
  SubscriptionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-subscription-management
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        S3Bucket:
          Ref: DeploymentBucket
        S3Key:
          Fn::Sub: ${Version}/subscription.zip
      Environment:
        Variables:
          SUBSCRIPTION_TABLE:
            Fn::ImportValue:
              Fn::Sub: ${AWS::StackName}-subscription-table
          STRIPE_SECRET_KEY:
            Ref: StripeSecretKey
      Role:
        Fn::GetAtt: SubscriptionLambdaRole.Arn
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-subscription-lambda

  SubscriptionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AWS::StackName}-subscription-management
      RetentionInDays: 14

  SubscriptionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  Fn::ImportValue:
                    Fn::Sub: ${AWS::StackName}-subscription-table

Parameters:
  DeploymentBucket:
    Type: String
    Description: S3 bucket containing deployment artifacts

  Version:
    Type: String
    Description: Version tag for deployment artifacts

  StripeSecretKey:
    Type: String
    Description: Stripe API secret key
    NoEcho: true

  SubscriptionManagementFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Ref: SubscriptionLambdaName
      Description: Manages API subscriptions and usage tracking
      Handler: index.handler
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      Code:
        S3Bucket:
          Ref: CodeBucket
        S3Key:
          Ref: CodeKey
      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME:
            Ref: SubscriptionTable
          TOPIC_ARN:
            Ref: SubscriptionTopic
      MemorySize: 256
      Publish: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-subscription-lambda

  SubscriptionManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SubscriptionManagementFunction}
      RetentionInDays: 30

  # API Gateway Integration
  SubscriptionApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-subscription-api
      Description: API for subscription management
      EndpointConfiguration:
        Types:
          - REGIONAL

  SubscriptionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: SubscriptionApi
      ParentId:
        Fn::GetAtt: [SubscriptionApi, RootResourceId]
      PathPart: subscriptions

  SubscriptionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: SubscriptionApi
      ResourceId:
        Ref: SubscriptionResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubscriptionManagementFunction.Arn}/invocations

  SubscriptionDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: SubscriptionMethod

  SubscriptionStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: SubscriptionDeployment
      RestApiId:
        Ref: SubscriptionApi
      StageName:
        Ref: EnvironmentName

  # IAM Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  Fn::GetAtt: [UsageTable, Arn]
              - Effect: Allow
                Action:
                  - apigateway:CreateApiKey
                  - apigateway:GetApiKey
                  - apigateway:UpdateApiKey
                  - apigateway:DeleteApiKey
                Resource: '*'
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*

  # Lambda Permission
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SubscriptionManagementFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SubscriptionApi}/*

Outputs:
  SubscriptionApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${SubscriptionApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}/subscriptions

  SubscriptionFunctionArn:
    Description: Lambda function ARN
    Value:
      Fn::GetAtt: [SubscriptionManagementFunction, Arn]
