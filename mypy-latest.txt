src/ml/models/specialized/code_completion.py:31: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
scripts/fix_all_vulnerabilities.py:192: error: Unsupported operand types for +
("object" and "int")  [operator]
                        report["total_vulnerabilities"] += 1
                        ^
scripts/fix_all_vulnerabilities.py:193: error: "object" has no attribute
"append"  [attr-defined]
                        report["vulnerabilities"].append(line.strip())
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/backend/scripts/setup_aws.py:25: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/python/backend/core/security.py:61: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/python/backend/core/security.py:62: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/python/backend/core/monitoring.py:80: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/python/backend/core/monitoring.py:81: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/python/backend/core/database.py:45: error: Name "relationship" is not
defined  [name-defined]
        subscription = relationship("Subscription", back_populates="user",...
                       ^~~~~~~~~~~~
src/python/backend/core/database.py:46: error: Name "relationship" is not
defined  [name-defined]
        api_calls = relationship("APICallLog", back_populates="user")
                    ^~~~~~~~~~~~
src/python/backend/core/database.py:47: error: Name "relationship" is not
defined  [name-defined]
        jobs = relationship("Job", back_populates="user")
               ^~~~~~~~~~~~
src/python/backend/core/database.py:65: error: Name "relationship" is not
defined  [name-defined]
        user = relationship("User", back_populates="subscription")
               ^~~~~~~~~~~~
src/python/backend/core/database.py:82: error: Name "relationship" is not
defined  [name-defined]
        user = relationship("User", back_populates="api_calls")
               ^~~~~~~~~~~~
src/python/backend/core/database.py:100: error: Name "relationship" is not
defined  [name-defined]
        user = relationship("User", back_populates="jobs")
               ^~~~~~~~~~~~
bleu_ai/distributed/training_manager.py:199: error: Need type annotation for
"history"  [var-annotated]
                history = {"train_loss": [], "train_acc": [], "val_loss": ...
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
bleu_ai/distributed/training_manager.py:270: error: "await" outside coroutine
("async def")  [await-not-async]
                    await self.initialize()
                    ^~~~~~~~~~~~~~~~~~~~~~~
tests/test_rate_limiting.py:12: error: Module
"src.services.rate_limiting_service" has no attribute "RateLimiter"; maybe
"rate_limiter"?  [attr-defined]
    from src.services.rate_limiting_service import RateLimiter, RateLimiti...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
submission/submit_awards.py:58: error: Value of type "object" is not indexable
[index]
                deadline = datetime.strptime(award["deadline"], "%Y-%m-%d"...
                                             ^~~~~~~~~~~~~~~~~
submission/submit_awards.py:62: error: Value of type "object" is not indexable
[index]
                    upcoming.append(f"{award['name']} ({days_remaining} da...
                                    ^~~~~~~~~~~~~~~~
submission/submit_awards.py:86: error: Value of type "object" is not indexable
[index]
                zip_path = self.base_dir / self.awards[award_id]["package"...
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
submission/submit_awards.py:115: error: Value of type "object" is not indexable
 [index]
                print(f"Submitting to {award['name']}...")
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
submission/submit_awards.py:116: error: Value of type "object" is not indexable
 [index]
                print(f"Package: {award['package']}")
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
submission/submit_awards.py:117: error: Value of type "object" is not indexable
 [index]
                print(f"URL: {award['submission_url']}")
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
submission/submit_awards.py:120: error: Unsupported target for indexed
assignment ("object")  [index]
                self.awards[award_id]["status"] = "submitted"
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
submission/submit_awards.py:135: error: Value of type "object" is not indexable
 [index]
                f.write(f"# {award['name']} Submission\n\n")
                        ^~~~~~~~~~~~~~~~~~
src/services/auth_service.py:263: error: Incompatible types in assignment
(expression has type "str | None", target has type "str")  [assignment]
                    msg["From"] = settings.SMTP_USER
                                  ^~~~~~~~~~~~~~~~~~
src/services/auth_service.py:277: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
    auth_service = AuthService(get_db())
                   ^~~~~~~~~~~~~~~~~~~~~
src/python/backend/config/settings.py:195: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/middleware/auth.py:45: error: Module has no attribute "SECRET_KEY"
[attr-defined]
                    settings.SECRET_KEY,
                    ^~~~~~~~~~~~~~~~~~~
src/middleware/auth.py:46: error: Module has no attribute "ALGORITHM"
[attr-defined]
                    algorithms=[settings.ALGORITHM],
                                ^~~~~~~~~~~~~~~~~~
src/middleware/auth.py:90: error: Module has no attribute "SECRET_KEY"
[attr-defined]
            settings.SECRET_KEY,
            ^~~~~~~~~~~~~~~~~~~
src/middleware/auth.py:91: error: Module has no attribute "ALGORITHM"
[attr-defined]
            algorithm=settings.ALGORITHM,
                      ^~~~~~~~~~~~~~~~~~
src/middleware/auth.py:109: error: Module has no attribute "SECRET_KEY"
[attr-defined]
                settings.SECRET_KEY,
                ^~~~~~~~~~~~~~~~~~~
src/middleware/auth.py:110: error: Module has no attribute "ALGORITHM"
[attr-defined]
                algorithms=[settings.ALGORITHM],
                            ^~~~~~~~~~~~~~~~~~
src/middleware/auth.py:136: error: Module has no attribute "SECRET_KEY"
[attr-defined]
                settings.SECRET_KEY,
                ^~~~~~~~~~~~~~~~~~~
src/middleware/auth.py:137: error: Module has no attribute "ALGORITHM"
[attr-defined]
                algorithms=[settings.ALGORITHM],
                            ^~~~~~~~~~~~~~~~~~
tests/middleware/test_auth.py:71: error: Incompatible default for argument
"expires_delta" (default has type "None", argument has type "timedelta")
[assignment]
    def create_test_token(user: User, expires_delta: timedelta = None):
                                                                 ^~~~
tests/middleware/test_auth.py:71: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
tests/middleware/test_auth.py:71: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
tests/middleware/test_auth.py:79: error: Module has no attribute "SECRET_KEY"
[attr-defined]
        return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settin...
                                     ^~~~~~~~~~~~~~~~~~~
tests/middleware/test_auth.py:79: error: Module has no attribute "ALGORITHM"
[attr-defined]
    ...t.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
                                                          ^~~~~~~~~~~~~~~~~~
src/routes/api_tokens.py:15: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
        return AuthService(db)
               ^~~~~~~~~~~~~~~
src/routes/api_tokens.py:19: error: Cannot instantiate abstract class
"APITokenService" with abstract attribute "execute"  [abstract]
        return APITokenService(db)
               ^~~~~~~~~~~~~~~~~~~
src/routes/api_tokens.py:29: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
        auth_service = AuthService(db)
                       ^~~~~~~~~~~~~~~
src/routes/api_tokens.py:30: error: Cannot instantiate abstract class
"APITokenService" with abstract attribute "execute"  [abstract]
        token_service = APITokenService(db)
                        ^~~~~~~~~~~~~~~~~~~
src/routes/api_tokens.py:43: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
        auth_service = AuthService(db)
                       ^~~~~~~~~~~~~~~
src/routes/api_tokens.py:44: error: Cannot instantiate abstract class
"APITokenService" with abstract attribute "execute"  [abstract]
        token_service = APITokenService(db)
                        ^~~~~~~~~~~~~~~~~~~
src/routes/api_tokens.py:56: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
        auth_service = AuthService(db)
                       ^~~~~~~~~~~~~~~
src/routes/api_tokens.py:57: error: Cannot instantiate abstract class
"APITokenService" with abstract attribute "execute"  [abstract]
        token_service = APITokenService(db)
                        ^~~~~~~~~~~~~~~~~~~
src/routes/api_tokens.py:71: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
        auth_service = AuthService(db)
                       ^~~~~~~~~~~~~~~
src/routes/api_tokens.py:72: error: Cannot instantiate abstract class
"APITokenService" with abstract attribute "execute"  [abstract]
        token_service = APITokenService(db)
                        ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/queue.py:5: error: Module
"src.python.backend.config.settings" has no attribute "get_config"
[attr-defined]
    from ..config.settings import get_config
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/backend/core/auth.py:10: error: Module
"src.python.backend.config.settings" has no attribute "get_config"
[attr-defined]
    from ..config.settings import get_config
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/backend/core/auth.py:12: error: Module
"src.python.backend.core.models" has no attribute "User"  [attr-defined]
    from .models import User
    ^~~~~~~~~~~~~~~~~~~~~~~~
src/python/backend/api/router.py:13: error: Module
"src.python.backend.config.settings" has no attribute "get_config"
[attr-defined]
    from ..config.settings import get_config
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "Dataset"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "DatasetCreate"
[attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "DatasetResponse"
[attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "JobList"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "JobResponse"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "JobUpdate"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "Model"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "ModelCreate"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "ModelResponse"
[attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "Project"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "ProjectCreate"
[attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "ProjectResponse"
[attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "User"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "UserCreate"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/api/router.py:21: error: Module
"src.python.backend.core.models" has no attribute "UserResponse"  [attr-defined]
    from ..core.models import (
    ^
src/python/backend/main.py:15: error: Module
"src.python.backend.config.settings" has no attribute "get_config"
[attr-defined]
    from .config.settings import get_config
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/backend/core/job_queue.py:11: error: Module
"src.python.backend.core.database" has no attribute "db_manager"  [attr-defined]
    from .database import db_manager
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/backend/core/cache.py:90: error: Incompatible return value type (got
"bytes", expected "str")  [return-value]
            return pickle.dumps(value)
                   ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/cache.py:97: error: Argument 1 to "loads" has
incompatible type "str"; expected "Buffer"  [arg-type]
                return pickle.loads(value)
                                    ^~~~~
submission/icml_2025/final_submission/code/quantum_fusion.py:78: error:
"QuantumFusion" has no attribute "training"  [attr-defined]
            if self.training and self.config.dropout_rate > 0:
               ^~~~~~~~~~~~~
submission/icml_2025/final_submission/code/quantum_attention.py:50: error:
Unsupported left operand type for - ("Never")  [operator]
            return (data - np.min(data)) / (np.max(data) - np.min(data))
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
submission/icml_2025/final_submission/code/contest_strategy.py:136: error:
Missing positional arguments "num_qubits", "feature_dim" in call to
"QuantumContestConfig"  [call-arg]
            super().__init__(config or QuantumContestConfig())
                                       ^~~~~~~~~~~~~~~~~~~~~~
submission/icml_2025/final_submission/code/contest_strategy.py:332: error:
"dict[Any, Any]" has no attribute "get_counts"  [attr-defined]
            counts = result.get_counts()
                     ^~~~~~~~~~~~~~~~~
submission/icml_2025/final_submission/code/contest_strategy.py:436: error: Too
many arguments for "_build_quantum_circuit" of "BleuQuantumContestOptimizer"
[call-arg]
            return self._build_quantum_circuit(num_qubits, num_layers, par...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
submission/icml_2025/final_submission/code/contest_strategy.py:436: error:
Argument 1 to "_build_quantum_circuit" of "BleuQuantumContestOptimizer" has
incompatible type "int"; expected "ndarray[Any, Any]"  [arg-type]
            return self._build_quantum_circuit(num_qubits, num_layers, par...
                                               ^~~~~~~~~~
submission/icml_2025/final_submission/code/contest_strategy.py:468: error:
Incompatible default for argument "features" (default has type "None", argument
has type "ndarray[Any, Any]")  [assignment]
    ...def _build_quantum_circuit(self, features: np.ndarray = None) -> None:
                                                               ^~~~
submission/icml_2025/final_submission/code/contest_strategy.py:468: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
submission/icml_2025/final_submission/code/contest_strategy.py:468: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
submission/icml_2025/final_submission/code/contest_strategy.py:474: error:
"BleuQuantumContestOptimizer" has no attribute "_apply_quantum_gates"
[attr-defined]
            self._apply_quantum_gates(params)
            ^~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/wasm/quantum_wasm.py:86: error: Argument 1 to "_allocate_memory"
of "QuantumWASM" has incompatible type "bytes"; expected
"ndarray[Any, Any] | list[Any] | str"  [arg-type]
                basis_ptr = self._allocate_memory(basis.encode())
                                                  ^~~~~~~~~~~~~~
src/quantum_py/utils/quantum_utils.py:102: error: No overload variant of
"trace" matches argument types "ndarray[Any, Any]", "list[int]", "list[int]"
[call-overload]
        reduced = np.trace(
                  ^
src/quantum_py/utils/quantum_utils.py:102: note: Possible overload variants:
src/quantum_py/utils/quantum_utils.py:102: note:     def trace(a: Any, offset: SupportsIndex = ..., axis1: SupportsIndex = ..., axis2: SupportsIndex = ..., dtype: Any = ..., out: None = ...) -> Any
src/quantum_py/utils/quantum_utils.py:102: note:     def [_ArrayType: Any] trace(a: Any, offset: SupportsIndex = ..., axis1: SupportsIndex = ..., axis2: SupportsIndex = ..., dtype: Any = ..., out: _ArrayType = ...) -> _ArrayType
src/quantum_py/utils/quantum_utils.py:131: error: Unsupported operand type for
unary - ("Never")  [operator]
        return -np.sum(eigenvals * np.log2(eigenvals))
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/circuit.py:137: error: Unsupported operand type for
unary - ("Never")  [operator]
            return -np.sum(eigenvalues * np.log2(eigenvalues))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/circuit.py:308: error: Invalid index type "int" for
"dict[str, Any]"; expected type "str"  [index]
            self.quantum_memory[hash(str(pattern))] = {
                                ^~~~~~~~~~~~~~~~~~
src/quantum_py/ml/train_xgboost.py:105: error: "None" has no attribute "fit"
[attr-defined]
                self.model.fit(
                ^~~~~~~~~~~~~~
src/quantum_py/ml/train_xgboost.py:117: error: "None" has no attribute
"feature_importances_"  [attr-defined]
                self.feature_importance = self.model.feature_importances_
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/ml/train_xgboost.py:170: error: Need type annotation for
"metrics" (hint: "metrics: dict[<type>, <type>] = ...")  [var-annotated]
            metrics = {}
            ^~~~~~~
src/quantum_py/core/quantum_state.py:155: error: Unsupported operand type for
unary - ("Never")  [operator]
            return float(-np.sum(eigenvalues * np.log2(eigenvalues)))
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:151: error: Need type annotation for
"error_syndromes" (hint: "error_syndromes: dict[<type>, <type>] = ...")
[var-annotated]
            self.error_syndromes = {}
            ^~~~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:152: error: Need type annotation for
"correction_methods" (hint: "correction_methods: dict[<type>, <type>] = ...")
[var-annotated]
            self.correction_methods = {}
            ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:186: error: Need type annotation for
"optimization_rules" (hint: "optimization_rules: list[<type>] = ...")
[var-annotated]
            self.optimization_rules = []
            ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:187: error: Need type annotation for
"performance_metrics" (hint: "performance_metrics: dict[<type>, <type>] = ...")
[var-annotated]
            self.performance_metrics = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:215: error: Incompatible types in assignment
(expression has type "None", variable has type "list[str]")  [assignment]
        rotation_blocks: List[str] = None
                                     ^~~~
src/quantum/python/quantum_ml.py:216: error: Incompatible types in assignment
(expression has type "None", variable has type "list[str]")  [assignment]
        entanglement_blocks: List[str] = None
                                         ^~~~
src/quantum/python/quantum_ml.py:234: error: Need type annotation for
"bleus_history" (hint: "bleus_history: list[<type>] = ...")  [var-annotated]
            self.bleus_history = []
            ^~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:346: error: Need type annotation for
"error_syndromes" (hint: "error_syndromes: dict[<type>, <type>] = ...")
[var-annotated]
            self.error_syndromes = {}
            ^~~~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:347: error: Need type annotation for
"correction_methods" (hint: "correction_methods: dict[<type>, <type>] = ...")
[var-annotated]
            self.correction_methods = {}
            ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:382: error: Need type annotation for
"optimization_rules" (hint: "optimization_rules: list[<type>] = ...")
[var-annotated]
            self.optimization_rules = []
            ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum/python/quantum_ml.py:383: error: Need type annotation for
"performance_metrics" (hint: "performance_metrics: dict[<type>, <type>] = ...")
[var-annotated]
            self.performance_metrics = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:47: note: "predict" of "PredictorProtocol" defined here
src/python/ml/deep_learning/uncertainty_handler.py:124: error: Item
"PredictorProtocol" of "PredictorProtocol | Any" has no attribute "compile"
[union-attr]
            self.bayesian_model.compile(
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:130: error: Incompatible
types in assignment (expression has type "ndarray[Any, dtype[floating[Any]]]",
variable has type "list[PredictorProtocol]")  [assignment]
            self.monte_carlo_samples = np.random.normal(size=(self.config....
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/deep_learning/uncertainty_handler.py:143: error: Unsupported
right operand type for in ("list[str] | None")  [operator]
                if "entropy" in self.config.uncertainty_metrics:
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:144: error: Incompatible
types in "await" (actual type "float", expected type "Awaitable[Any]")  [misc]
                    uncertainty_metrics["entropy"] = await self._calculate...
                                                     ^~~~~~~~~~~~~~~~~~~~~...
src/python/ml/deep_learning/uncertainty_handler.py:146: error: Unsupported
right operand type for in ("list[str] | None")  [operator]
                if "variance" in self.config.uncertainty_metrics:
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:149: error: Unsupported
right operand type for in ("list[str] | None")  [operator]
                if "confidence_interval" in self.config.uncertainty_metric...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:154: error: Unsupported
right operand type for in ("list[str] | None")  [operator]
                if "calibration_score" in self.config.uncertainty_metrics ...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:170: error: Unsupported
operand type for unary - ("Never")  [operator]
            entropy = -np.sum(probabilities * np.log(probabilities + 1e-12...
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:188: error:
"PredictorProtocol" has no attribute "predict_proba"  [attr-defined]
                    pred = model.predict_proba(X)
                           ^~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:200: error: Unexpected
keyword argument "verbose" for "predict" of "PredictorProtocol"  [call-arg]
                    pred = self.bayesian_model.predict(X, verbose=0)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:224: error:
"PredictorProtocol" has no attribute "predict_proba"  [attr-defined]
                    pred = model.predict_proba(X)
                           ^~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:237: error: Unexpected
keyword argument "verbose" for "predict" of "PredictorProtocol"  [call-arg]
                    pred = self.bayesian_model.predict(X, verbose=0)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:263: error:
"PredictorProtocol" has no attribute "predict_proba"  [attr-defined]
                    pred = model.predict_proba(X)
                           ^~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:274: error: Unexpected
keyword argument "verbose" for "predict" of "PredictorProtocol"  [call-arg]
                    pred = self.bayesian_model.predict(X, verbose=0)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:312: error: "float" object
is not iterable  [misc]
                lower, upper = uncertainty["confidence_interval"]
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/uncertainty_handler.py:313: error: Cannot determine
type of "lower"  [has-type]
    ...    adjusted_predictions = np.clip(adjusted_predictions, lower, upper)
                                                                ^~~~~
src/python/ml/deep_learning/uncertainty_handler.py:313: error: Cannot determine
type of "upper"  [has-type]
    ...    adjusted_predictions = np.clip(adjusted_predictions, lower, upper)
                                                                       ^~~~~
src/python/ml/deep_learning/uncertainty_handler.py:372: error: "T" has no
attribute "predict"  [attr-defined]
            predictions = model.predict(features)
                          ^~~~~~~~~~~~~
src/python/ml/deep_learning/optimization.py:229: error: Incompatible return
value type (got "floating[Any]", expected "float")  [return-value]
            return np.mean(latencies)
                   ^~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/advanced_decision_tree.py:155: error: Incompatible
types in assignment (expression has type "dict[str, Any]", variable has type
"None")  [assignment]
            self.model = self._build_tree(features, labels)
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/advanced_decision_tree.py:157: error: Unused
"type: ignore" comment  [unused-ignore]
            self.feature_importance = dict(feature_importance_result or {}...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/computer_vision/quantum_loss.py:182: error: Unused "type: ignore"
comment  [unused-ignore]
            quantum_state = features.numpy()  # type: ignore
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_fusion.py:45: error: Need type annotation
for "_state_cache" (hint: "_state_cache: dict[<type>, <type>] = ...")
[var-annotated]
            self._state_cache = {}  # Cache for quantum state reshaping
            ^~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_fusion.py:393: error: Argument 1 to "len"
has incompatible type "list[int] | None"; expected "Sized"  [arg-type]
                torch.randn(len(config.feature_dims), self.fusion_dim)
                                ^~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_attention.py:149: error:
"QuantumAttention" has no attribute "initialized"  [attr-defined]
            if not self.initialized:
                   ^~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_attention.py:153: error:
"QuantumAttention" has no attribute "_normalize_data"  [attr-defined]
            normalized_data = self._normalize_data(data)
                              ^~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_attention.py:156: error:
"QuantumAttention" has no attribute "_prepare_quantum_state"  [attr-defined]
            quantum_state = self._prepare_quantum_state(normalized_data)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_attention.py:157: error:
"QuantumAttention" has no attribute "_apply_attention_gates"; maybe
"_apply_attention_layer" or "_apply_quantum_gates"?  [attr-defined]
            quantum_state = self._apply_attention_gates(quantum_state)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_attention.py:160: error:
"QuantumAttention" has no attribute "_measure_quantum_state"  [attr-defined]
            measurements = self._measure_quantum_state(quantum_state)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_attention.py:161: error:
"QuantumAttention" has no attribute "_process_measurements"  [attr-defined]
            return self._process_measurements(measurements)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/bleu/tests/conftest.py:64: error: Incompatible types in assignment
(expression has type "str | None", variable has type "str")  [assignment]
        for k, v in original_env.items():
        ^
src/python/backend/core/performance.py:69: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/python/automation/visualizations.py:354: error: Need type annotation for
"error_data"  [var-annotated]
            error_data = {
                         ^
src/python/automation/visualizations.py:475: error: Need type annotation for
"step_times" (hint: "step_times: dict[<type>, <type>] = ...")  [var-annotated]
            step_times = {}
            ^~~~~~~~~~
src/python/automation/visualizations.py:496: error: Need type annotation for
"error_counts" (hint: "error_counts: dict[<type>, <type>] = ...")
[var-annotated]
            error_counts = {}
            ^~~~~~~~~~~~
src/python/automation/pipeline.py:74: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/python/automation/pipeline.py:75: note: By default the bodies of untyped functions are not checked, consider using --check-untyped-defs  [annotation-unchecked]
src/python/automation/pipeline.py:321: error: Need type annotation for
"visited" (hint: "visited: set[<type>] = ...")  [var-annotated]
            visited = set()
            ^~~~~~~
src/python/automation/pipeline.py:355: error: Item "None" of "list[str] | None"
has no attribute "__iter__" (not iterable)  [union-attr]
    ...              dep: self.step_results[dep] for dep in step.dependencies
                                                            ^~~~~~~~~~~~~~~~~
src/python/automation/pipeline.py:410: error: Item "None" of
"PipelineAnalytics | None" has no attribute "step_execution_time"  [union-attr]
                self.analytics.step_execution_time.labels(
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/enhanced_xgboost.py:80: error: Incompatible types in assignment
(expression has type "QuantumFeatureConfig", variable has type
"BaseConfig | None")  [assignment]
            self.config = config
                          ^~~~~~
src/ml/enhanced_xgboost.py:144: error: Need type annotation for "audit_log"
(hint: "audit_log: list[<type>] = ...")  [var-annotated]
            self.audit_log = []
            ^~~~~~~~~~~~~~
src/ml/enhanced_xgboost.py:195: error: Need type annotation for
"optimization_history" (hint: "optimization_history: list[<type>] = ...")
[var-annotated]
            self.optimization_history = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/enhanced_xgboost.py:285: error: Cannot instantiate abstract class
"QuantumFeatureProcessor" with abstract attribute "process"  [abstract]
            self.quantum_processor = QuantumFeatureProcessor(self.quantum_...
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/ml/enhanced_xgboost.py:286: error: Cannot instantiate abstract class
"SecurityManager" with abstract attribute "execute"  [abstract]
            self.security_manager = SecurityManager(self.security_config)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/enhanced_xgboost.py:292: error: Need type annotation for
"training_history" (hint: "training_history: list[<type>] = ...")
[var-annotated]
            self.training_history = []
            ^~~~~~~~~~~~~~~~~~~~~
src/ml/enhanced_xgboost.py:293: error: Need type annotation for
"validation_history" (hint: "validation_history: list[<type>] = ...")
[var-annotated]
            self.validation_history = []
            ^~~~~~~~~~~~~~~~~~~~~~~
src/ml/enhanced_xgboost.py:332: error: "None" has no attribute "fit"
[attr-defined]
                self.model.fit(
                ^~~~~~~~~~~~~~
src/ml/enhanced_xgboost.py:347: error: "None" has no attribute
"feature_importances_"  [attr-defined]
                self.feature_importance = self.model.feature_importances_
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/enhanced_xgboost.py:446: error: "None" has no attribute "load_raw"
[attr-defined]
                self.model.load_raw(model_data)
                ^~~~~~~~~~~~~~~~~~~
src/ml/optimization/adaptive_learning.py:50: error: Incompatible return value
type (got "floating[Any]", expected "float")  [return-value]
            return np.linalg.norm(state1 - state2)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/features/quantum_interaction_detector.py:35: error: Need type annotation
for "interaction_scores" (hint:
"interaction_scores: dict[<type>, <type>] = ...")  [var-annotated]
            self.interaction_scores = {}
            ^~~~~~~~~~~~~~~~~~~~~~~
src/ml/features/quantum_interaction_detector.py:36: error: Need type annotation
for "classical_correlations" (hint:
"classical_correlations: dict[<type>, <type>] = ...")  [var-annotated]
            self.classical_correlations = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/features/quantum_interaction_detector.py:37: error: Need type annotation
for "quantum_correlations" (hint:
"quantum_correlations: dict[<type>, <type>] = ...")  [var-annotated]
            self.quantum_correlations = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/features/quantum_interaction_detector.py:38: error: Need type annotation
for "shap_interactions" (hint: "shap_interactions: dict[<type>, <type>] = ...")
[var-annotated]
            self.shap_interactions = {}
            ^~~~~~~~~~~~~~~~~~~~~~
src/benchmarks/performance_benchmark.py:150: error: Argument "value" to
"BenchmarkResult" has incompatible type "floating[Any]"; expected "float"
[arg-type]
                    value=accuracy * 100,
                          ^~~~~~~~~~~~~~
src/benchmarks/performance_benchmark.py:215: error: Argument "value" to
"BenchmarkResult" has incompatible type "floating[Any]"; expected "float"
[arg-type]
                    value=energy_efficiency,
                          ^~~~~~~~~~~~~~~~~
src/benchmarks/performance_benchmark.py:218: error: List item 0 has
incompatible type "floating[Any]"; expected "float"  [list-item]
                        energy_readings, [baseline_energy] * len(energy_re...
                                          ^~~~~~~~~~~~~~~
src/benchmarks/performance_benchmark.py:253: error: Need type annotation for
"min_time"  [var-annotated]
                min_time = np.min(times)
                           ^~~~~~~~~~~~~
src/benchmarks/performance_benchmark.py:254: error: Need type annotation for
"max_time"  [var-annotated]
                max_time = np.max(times)
                           ^~~~~~~~~~~~~
src/benchmarks/performance_benchmark.py:265: error: Argument "value" to
"BenchmarkResult" has incompatible type "floating[Any]"; expected "float"
[arg-type]
                    value=(baseline_time - avg_time) / baseline_time * 100...
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/benchmarks/performance_benchmark.py:267: error: Argument
"confidence_interval" to "BenchmarkResult" has incompatible type
"tuple[floating[Any], floating[Any]]"; expected "tuple[float, float] | None"
[arg-type]
                    confidence_interval=(
                                        ^
src/benchmarks/performance_benchmark.py:272: error: List item 0 has
incompatible type "floating[Any]"; expected "float"  [list-item]
                        times, [baseline_time] * len(times)
                                ^~~~~~~~~~~~~
src/backend/src/ml/models/evaluate.py:5: error: Unused "type: ignore" comment
[unused-ignore]
    import joblib  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/backend/src/ml/models/evaluate.py:6: error: Unused "type: ignore" comment
[unused-ignore]
    import numpy as np  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/security/encryption_manager.py:76: error: Item "dict[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "tobytes"
[union-attr]
                            "data": data.tobytes(),
                                    ^~~~~~~~~~~~
bleu_ai/security/encryption_manager.py:77: error: Item "dict[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "shape"
[union-attr]
                            "shape": data.shape,
                                     ^~~~~~~~~~
bleu_ai/security/encryption_manager.py:78: error: Item "dict[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "dtype"
[union-attr]
                            "dtype": str(data.dtype),
                                         ^~~~~~~~~~
bleu_ai/security/encryption_manager.py:84: error: Item "ndarray[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "cpu"  [union-attr]
                            "data": data.cpu().numpy().tobytes(),
                                    ^~~~~~~~
bleu_ai/security/encryption_manager.py:84: error: Item "dict[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "cpu"  [union-attr]
                            "data": data.cpu().numpy().tobytes(),
                                    ^~~~~~~~
bleu_ai/security/encryption_manager.py:85: error: Item "dict[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "shape"
[union-attr]
                            "shape": data.shape,
                                     ^~~~~~~~~~
bleu_ai/security/encryption_manager.py:86: error: Item "dict[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "dtype"
[union-attr]
                            "dtype": str(data.dtype),
                                         ^~~~~~~~~~
bleu_ai/security/encryption_manager.py:87: error: Item "ndarray[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "requires_grad"
[union-attr]
                            "requires_grad": data.requires_grad,
                                             ^~~~~~~~~~~~~~~~~~
bleu_ai/security/encryption_manager.py:87: error: Item "dict[Any, Any]" of
"ndarray[Any, Any] | Any | dict[Any, Any]" has no attribute "requires_grad"
[union-attr]
                            "requires_grad": data.requires_grad,
                                             ^~~~~~~~~~~~~~~~~~
bleu_ai/quantum/quantum_processor.py:48: error: Type variable
"bleu_ai.quantum.quantum_processor.Device" is unbound  [valid-type]
            self.dev: Optional[Device] = None  # Using generic Device type
                               ^
bleu_ai/quantum/quantum_processor.py:48: note: (Hint: Use "Generic[Device]" or "Protocol[Device]" base class to bind "Device" inside a class)
bleu_ai/quantum/quantum_processor.py:48: note: (Hint: Use "Device" in function signature to bind "Device" inside a function)
bleu_ai/quantum/quantumProcessor.py:71: error: Need type annotation for
"enhanced_data" (hint: "enhanced_data: list[<type>] = ...")  [var-annotated]
                enhanced_data = []
                ^~~~~~~~~~~~~
bleu_ai/optimization/quantum_optimizer.py:65: error: Function
"builtins.callable" is not valid as a type  [valid-type]
            objective_function: callable,
                                ^
bleu_ai/optimization/quantum_optimizer.py:65: note: Perhaps you meant "typing.Callable" instead of "callable"?
bleu_ai/optimization/quantum_optimizer.py:134: error: Need type annotation for
"history"  [var-annotated]
                history = {"train_loss": [], "train_acc": [], "quantum_enh...
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
bleu_ai/optimization/adaptive_learning.py:43: error: Need type annotation for
"learning_history" (hint: "learning_history: list[<type>] = ...")
[var-annotated]
            self.learning_history = []
            ^~~~~~~~~~~~~~~~~~~~~
bleu_ai/models/ensemble_model.py:21: error: Need type annotation for "metrics"
(hint: "metrics: dict[<type>, <type>] = ...")  [var-annotated]
            self.metrics = {}
            ^~~~~~~~~~~~
bleu_ai/distributed/distributed_manager.py:160: error: "await" outside
coroutine ("async def")  [await-not-async]
                    await self.client.close()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/compression/model_compressor.py:60: error: Incompatible types in
assignment (expression has type "int", variable has type "None")  [assignment]
                self.original_size = self._get_model_size(model)
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/compression/model_compressor.py:67: error: Incompatible types in
assignment (expression has type "int", variable has type "None")  [assignment]
                self.compressed_size = self._get_model_size(compressed)
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:46: error: "BenchmarkSuite" has no
attribute "run_classical_face_recognition"  [attr-defined]
            classical_results = await self.run_classical_face_recognition(...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:51: error: "BenchmarkSuite" has no
attribute "run_quantum_face_recognition"  [attr-defined]
            quantum_results = await self.run_quantum_face_recognition(test...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:76: error: "BenchmarkSuite" has no
attribute "run_classical_object_detection"  [attr-defined]
            classical_results = await self.run_classical_object_detection(...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:81: error: "BenchmarkSuite" has no
attribute "run_quantum_object_detection"  [attr-defined]
            quantum_results = await self.run_quantum_object_detection(test...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:106: error: "BenchmarkSuite" has no
attribute "run_classical_scene_understanding"  [attr-defined]
            classical_results = await self.run_classical_scene_understandi...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:111: error: "BenchmarkSuite" has no
attribute "run_quantum_scene_understanding"  [attr-defined]
            quantum_results = await self.run_quantum_scene_understanding(t...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:132: error: "BenchmarkSuite" has no
attribute "benchmark_quantum_optimization"  [attr-defined]
            optimization_results = await self.benchmark_quantum_optimizati...
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:135: error: "BenchmarkSuite" has no
attribute "benchmark_quantum_feature_extraction"  [attr-defined]
            feature_results = await self.benchmark_quantum_feature_extract...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:138: error: "BenchmarkSuite" has no
attribute "benchmark_quantum_security"  [attr-defined]
            security_results = await self.benchmark_quantum_security()
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/benchmarks/benchmark_suite.py:250: error: Missing return statement
[empty-body]
        def prepare_test_images(self, category: str) -> List[np.ndarray]:
        ^
bleu_ai/benchmarks/benchmark_suite.py:270: error: Missing return statement
[empty-body]
        async def measure_response_time(self) -> float:
        ^
bleu_ai/benchmarks/benchmark_suite.py:274: error: Missing return statement
[empty-body]
        async def measure_power_consumption(self) -> float:
        ^
bleu_ai/benchmarks/benchmark_suite.py:278: error: Missing return statement
[empty-body]
        def calculate_energy_efficiency(self, power_consumption: float) ->...
        ^
bleu_ai/ai/uncertaintyHandler.py:64: error: Incompatible types in assignment
(expression has type "ndarray[Any, Any]", variable has type "None")
[assignment]
                self.uncertainty_scores = uncertainty
                                          ^~~~~~~~~~~
bleu_ai/ai/uncertaintyHandler.py:65: error: Incompatible types in assignment
(expression has type "ndarray[Any, Any]", variable has type "None")
[assignment]
                self.confidence_scores = confidence
                                         ^~~~~~~~~~
bleu_ai/ai/uncertaintyHandler.py:92: error: "None" has no attribute "fit"
[attr-defined]
                self.ensemble.fit(
                ^~~~~~~~~~~~~~~~~
bleu_ai/ai/uncertaintyHandler.py:99: error: "None" has no attribute
"estimators_"  [attr-defined]
                    or self.ensemble.estimators_ is None
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/ai/uncertaintyHandler.py:103: error: "None" has no attribute
"estimators_"  [attr-defined]
    ...       [tree.predict_proba(features) for tree in self.ensemble.estimat...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
bleu_ai/ai/ensembleManager.py:25: error: Incompatible default for argument
"methods" (default has type "None", argument has type "list[str]")  [assignment]
            methods: List[str] = None,
                                 ^~~~
bleu_ai/ai/ensembleManager.py:25: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
bleu_ai/ai/ensembleManager.py:25: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
bleu_ai/ai/ensembleManager.py:36: error: Need type annotation for "models"
(hint: "models: dict[<type>, <type>] = ...")  [var-annotated]
            self.models = {}
            ^~~~~~~~~~~
bleu_ai/ai/ensembleManager.py:37: error: Need type annotation for "weights"
(hint: "weights: dict[<type>, <type>] = ...")  [var-annotated]
            self.weights = {}
            ^~~~~~~~~~~~
bleu_ai/ai/ensembleManager.py:90: error: Need type annotation for "cv_scores"
[var-annotated]
            cv_scores = {method: [] for method in self.methods}
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/ai/ensembleManager.py:223: error: Incompatible return value type (got
"dict[Any, dict[str, Any]]", expected "dict[str, float]")  [return-value]
                return performance
                       ^~~~~~~~~~~
backend/inference.py:153: error: Argument 1 to "len" has incompatible type
"int | None"; expected "Sized"  [arg-type]
            logger.info(f"✅ Found {len(MODEL_CACHE['feature_names'])} " f"...
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
backend/inference.py:207: error: Incompatible types in assignment (expression
has type "str", target has type "int | None")  [assignment]
            MODEL_CACHE["loaded_at"] = datetime.now().isoformat()
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
backend/inference.py:208: error: Incompatible types in assignment (expression
has type "dict[str, Any]", target has type "int | None")  [assignment]
            MODEL_CACHE["metadata"] = get_model_metadata()
                                      ^~~~~~~~~~~~~~~~~~~~
backend/inference.py:266: error: "int" has no attribute "transform"
[attr-defined]
                    scaled_features = MODEL_CACHE["scaler"].transform(resh...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
backend/inference.py:336: error: Item "int" of "int | None" has no attribute
"predict"  [union-attr]
            prediction = MODEL_CACHE["model"].predict(processed_features)
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
backend/inference.py:336: error: Item "None" of "int | None" has no attribute
"predict"  [union-attr]
            prediction = MODEL_CACHE["model"].predict(processed_features)
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
backend/inference.py:337: error: Item "int" of "int | None" has no attribute
"predict_proba"  [union-attr]
            prediction_prob = MODEL_CACHE["model"].predict_proba(processed...
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
backend/inference.py:337: error: Item "None" of "int | None" has no attribute
"predict_proba"  [union-attr]
            prediction_prob = MODEL_CACHE["model"].predict_proba(processed...
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
backend/inference.py:426: error: Argument 1 to "_run_prediction_with_timeout"
has incompatible type "ndarray[Any, Any] | None"; expected "ndarray[Any, Any]"
[arg-type]
                processed_features, timeout
                ^~~~~~~~~~~~~~~~~~
backend/inference.py:434: error: Unsupported operand types for + ("None" and
"int")  [operator]
                MODEL_CACHE["prediction_count"] += 1
                ^
backend/inference.py:434: note: Left operand is of type "int | None"
backend/inference.py:435: error: Incompatible types in assignment (expression
has type "str", target has type "int | None")  [assignment]
    ...           MODEL_CACHE["last_prediction_time"] = datetime.now().isofor...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
backend/inference.py:439: error: Argument 1 to "update" of "MutableMapping" has
incompatible type "dict[str, Any] | None"; expected
"SupportsKeysAndGetItem[str, dict[str, Any]]"  [arg-type]
            result.update(prediction_result)
                          ^~~~~~~~~~~~~~~~~
src/quantum_py/types/quantum_types.py:198: error: Need type annotation for
"layers" (hint: "layers: list[<type>] = ...")  [var-annotated]
            layers = []
            ^~~~~~
src/quantum_py/quantum/quantum_processor.py:242: error: Incompatible types in
assignment (expression has type "ndarray[Any, Any]", variable has type
"list[Any]")  [assignment]
                    quantum_features = await self._optimize_quantum_featur...
                                       ^
src/quantum_py/quantum/quantum_processor.py:305: error: Incompatible return
value type (got "floating[Any]", expected "float")  [return-value]
                return loss
                       ^~~~
src/quantum_py/quantum/processor.py:139: error: Return type "bool" of
"initialize" incompatible with return type "None" in supertype
"QuantumProcessorBase"  [override]
        def initialize(self) -> bool:
        ^
src/quantum_py/quantum/processor.py:143: error: Incompatible types in
assignment (expression has type "QuantumCircuit", variable has type "None")
[assignment]
                self.circuit = QuantumCircuit(
                               ^
src/quantum_py/optimization/contest_strategy.py:231: error: "dict[Any, Any]"
has no attribute "get_counts"  [attr-defined]
            counts = result.get_counts()
                     ^~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:56: error: Function
"builtins.callable" is not valid as a type  [valid-type]
            self.noise_models: Dict[str, callable] = {}
                                         ^
src/quantum_py/core/quantum_processor.py:56: note: Perhaps you meant "typing.Callable" instead of "callable"?
src/quantum_py/core/quantum_processor.py:286: error: "QuantumCircuit" has no
attribute "gates"  [attr-defined]
            if len(circuit.gates) > self.config.max_depth:
                   ^~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:288: error: "QuantumCircuit" has no
attribute "gates"  [attr-defined]
                    f"Circuit depth {len(circuit.gates)} exceeds maximum "
                                         ^~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:293: error: "QuantumCircuit" has no
attribute "gates"  [attr-defined]
            for gate in circuit.gates:
                        ^~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:296: error: "QuantumCircuit" has no
attribute "state"; maybe "stats"?  [attr-defined]
                    self._apply_error_correction(circuit.state)
                                                 ^~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:306: error: "QuantumCircuit" has no
attribute "state"; maybe "stats"?  [attr-defined]
                    circuit.state.amplitudes = noise_func(circuit.state.am...
                    ^~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:356: error: "QuantumProcessor" has no
attribute "_get_current_error_rates"  [attr-defined]
            error_rates = self._get_current_error_rates()
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:357: error: "QuantumProcessor" has no
attribute "_get_qubit_stability"; maybe "_get_qubit_utilization"?
[attr-defined]
            qubit_stability = self._get_qubit_stability()
                              ^~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:393: error: "QuantumProcessor" has no
attribute "_calculate_correction_success"  [attr-defined]
            success_rate = self._calculate_correction_success()
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:470: error: Cannot determine type of
"state"  [has-type]
            if hasattr(self, "state") and self.state is not None:
                                          ^~~~~~~~~~
src/quantum_py/core/quantum_processor.py:472: error: Cannot determine type of
"state"  [has-type]
                if np.allclose(self.state, np.zeros_like(self.state)):
                               ^~~~~~~~~~
src/quantum_py/core/quantum_processor.py:480: error: "QuantumProcessor" has no
attribute "_clear_unused_resources"  [attr-defined]
            self._clear_unused_resources()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:486: error: "ProcessorConfig" has no
attribute "max_workers"; maybe "num_workers"?  [attr-defined]
            self.config.num_workers = min(num_cores, self.config.max_worke...
                                                     ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:492: error: "QuantumProcessor" has no
attribute "_configure_parallel_circuit_execution"  [attr-defined]
            self._configure_parallel_circuit_execution()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:497: error: "QuantumProcessor" has no
attribute "_allocate_qubits"  [attr-defined]
            self._allocate_qubits()
            ^~~~~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_processor.py:586: error: Missing return statement
[empty-body]
    def process_quantum_circuit(
    ^
src/quantum_py/core/quantum_processor.py:603: error: Missing return statement
[empty-body]
    def analyze_quantum_results(
    ^
src/quantum_py/core/quantum_processor.py:620: error: Missing return statement
[empty-body]
    def optimize_quantum_parameters(
    ^
src/python/operations/__init__.py:10: error: Module
"src.python.operations.resource_optimizer" has no attribute
"ResourceConstraints"  [attr-defined]
    from .resource_optimizer import ResourceConstraints, ResourceMetrics, ...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/operations/__init__.py:10: error: Module
"src.python.operations.resource_optimizer" has no attribute "ResourceMetrics"
[attr-defined]
    from .resource_optimizer import ResourceConstraints, ResourceMetrics, ...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/operations/__init__.py:10: error: Module
"src.python.operations.resource_optimizer" has no attribute "ResourceOptimizer"
[attr-defined]
    from .resource_optimizer import ResourceConstraints, ResourceMetrics, ...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/computer_vision/vision_processor.py:42: error: Unused
"type: ignore" comment  [unused-ignore]
            self._quantum_processor = None  # type: ignore
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/vision_processor.py:189: error: Argument 1 to
"run" has incompatible type "Future[list[Any]]"; expected
"Coroutine[Any, Any, list[Any]]"  [arg-type]
            results: List = asyncio.run(asyncio.gather(*tasks))
                                        ^~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/vision_processor.py:299: error: "None" has no
attribute "process_features"  [attr-defined]
            quantum_features = self._quantum_processor.process_features(fe...
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_vision_model.py:66: error: Unexpected
keyword argument "num_heads" for "QuantumAttentionConfig"  [call-arg]
                    attention_config = QuantumAttentionConfig(
                                       ^
src/python/ml/computer_vision/quantum_vision_model.py:66: error: Unexpected
keyword argument "use_entanglement" for "QuantumAttentionConfig"  [call-arg]
                    attention_config = QuantumAttentionConfig(
                                       ^
src/python/ml/computer_vision/quantum_vision_model.py:66: error: Unexpected
keyword argument "use_superposition" for "QuantumAttentionConfig"  [call-arg]
                    attention_config = QuantumAttentionConfig(
                                       ^
src/python/ml/computer_vision/quantum_vision_model.py:78: error: Unexpected
keyword argument "feature_dims" for "QuantumFusionConfig"; did you mean
"feature_dim"?  [call-arg]
                    fusion_config = QuantumFusionConfig(
                                    ^
src/python/ml/computer_vision/quantum_vision_model.py:78: error: Unexpected
keyword argument "fusion_dim" for "QuantumFusionConfig"  [call-arg]
                    fusion_config = QuantumFusionConfig(
                                    ^
src/python/ml/computer_vision/quantum_vision_model.py:78: error: Unexpected
keyword argument "num_layers" for "QuantumFusionConfig"  [call-arg]
                    fusion_config = QuantumFusionConfig(
                                    ^
src/python/ml/computer_vision/quantum_vision_model.py:78: error: Unexpected
keyword argument "use_entanglement" for "QuantumFusionConfig"  [call-arg]
                    fusion_config = QuantumFusionConfig(
                                    ^
src/python/ml/computer_vision/quantum_vision_model.py:78: error: Unexpected
keyword argument "use_superposition" for "QuantumFusionConfig"  [call-arg]
                    fusion_config = QuantumFusionConfig(
                                    ^
src/python/ml/computer_vision/quantum_vision_model.py:123: error:
"QuantumAttention" has no attribute "compute_attention"  [attr-defined]
                    features = self.attention.compute_attention(
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_vision_model.py:128: error:
"QuantumFusion" has no attribute "fuse_features"  [attr-defined]
                    features = self.fusion.fuse_features([features])
                               ^~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/quantum_vision_model.py:139: error: "None" has no
attribute "compile"  [attr-defined]
                self.model.compile(
                ^~~~~~~~~~~~~~~~~~
src/applications/healthcare.py:46: error: Unexpected keyword argument
"privacy_epsilon" for "QuantumSecurityManager"  [call-arg]
            self.security_manager = QuantumSecurityManager(
                                    ^
src/quantum_py/vision/quantum_detector.py:70: error: Cannot instantiate
abstract class "QuantumProcessor" with abstract attribute
"apply_error_correction"  [abstract]
                self.quantum_processor = QuantumProcessor(
                                         ^
src/quantum_py/vision/quantum_detector.py:242: error: "ndarray[Any, Any]" has
no attribute "unsqueeze"  [attr-defined]
            image = image.unsqueeze(0).to(self.device)
                    ^~~~~~~~~~~~~~~
src/quantum_py/vision/quantum_detector.py:329: error: Incompatible types in
assignment (expression has type "floating[Any]", target has type "float")
[assignment]
            self.performance_metrics["average_confidence"] = np.mean(
                                                             ^
src/quantum_py/vision/quantum_detector.py:345: error: Incompatible types in
assignment (expression has type "floating[Any]", target has type "float")
[assignment]
    ...    self.performance_metrics["scene_accuracy"] = np.mean(scene_confide...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
src/quantum_py/vision/quantum_detector.py:355: error: Incompatible types in
assignment (expression has type "floating[Any]", target has type "float")
[assignment]
    ...              self.performance_metrics["temporal_accuracy"] = np.mean(
                                                                     ^
src/quantum_py/quantum/hybrid/xgboost_quantum_hybrid.py:59: error: Cannot
instantiate abstract class "QuantumProcessor" with abstract attribute
"apply_error_correction"  [abstract]
    ...       self.quantum_processor = quantum_processor or QuantumProcessor(
                                                            ^
src/quantum_py/quantum/hybrid/xgboost_quantum_hybrid.py:101: error: Need type
annotation for "metrics" (hint: "metrics: dict[<type>, <type>] = ...")
[var-annotated]
            self.metrics = {}
            ^~~~~~~~~~~~
src/quantum_py/quantum/hybrid/xgboost_quantum_hybrid.py:102: error: Need type
annotation for "training_history" (hint: "training_history: list[<type>] = ...")
 [var-annotated]
            self.training_history = []
            ^~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/hybrid/xgboost_quantum_hybrid.py:216: error: "None" has
no attribute "get_score"  [attr-defined]
                self.feature_importance = self.model.get_score(importance_...
                                          ^~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/hybrid/xgboost_quantum_hybrid.py:220: error: "None" has
no attribute "eval"  [attr-defined]
                    "train": dict(self.model.eval(dtrain)),
                                  ^~~~~~~~~~~~~~~
src/quantum_py/quantum/hybrid/xgboost_quantum_hybrid.py:221: error: "None" has
no attribute "eval"  [attr-defined]
                    "val": dict(self.model.eval(dval)),
                                ^~~~~~~~~~~~~~~
src/quantum_py/ml/enhanced_xgboost.py:43: error: Cannot instantiate abstract
class "QuantumProcessor" with abstract attribute "apply_error_correction"
[abstract]
            self.quantum_processor = QuantumProcessor()
                                     ^~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:68: error: "QuantumCircuit" has no
attribute "measure"  [attr-defined]
                measurements = qpe_circuit.measure(control_qubits)
                               ^~~~~~~~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:74: error: Incompatible return value
type (got "floating[Any]", expected "float")  [return-value]
            return np.mean(phases)
                   ^~~~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:120: error: "QuantumCircuit" has no
attribute "measure"  [attr-defined]
            circuit.measure(list(range(num_qubits)))
            ^~~~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:143: error: Unexpected keyword
argument "phase" for "add_gate" of "QuantumCircuit"  [call-arg]
                    circuit.add_gate("CP", [q, i], phase=2 * np.pi / 2 ** ...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/quantum_py/core/quantum_algorithms.py:201: error: "QuantumCircuit" has no
attribute "gates"  [attr-defined]
            circuit.gates.extend(qft_circuit.gates)
            ^~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:207: error: "QuantumCircuit" has no
attribute "measure"  [attr-defined]
            measurements = circuit.measure(list(range(precision_qubits)))
                           ^~~~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:232: error: "QuantumCircuit" has no
attribute "state"; maybe "stats"?  [attr-defined]
            circuit.state.amplitudes[:2] = state
            ^~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:243: error: "QuantumCircuit" has no
attribute "measure"  [attr-defined]
            measurements = circuit.measure([0, 1])
                           ^~~~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:260: error: "QuantumCircuit" has no
attribute "state"; maybe "stats"?  [attr-defined]
            circuit.state.amplitudes[:2] = state
            ^~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:280: error: "QuantumCircuit" has no
attribute "measure"  [attr-defined]
                measurements = circuit.measure(qubits)
                               ^~~~~~~~~~~~~~~
src/quantum_py/core/quantum_algorithms.py:288: error: "QuantumCircuit" has no
attribute "measure"  [attr-defined]
                measurements = circuit.measure(qubits)
                               ^~~~~~~~~~~~~~~
src/python/ml/multimodal/multimodal_processor.py:61: error: Need type
annotation for "models" (hint: "models: dict[<type>, <type>] = ...")
[var-annotated]
            self.models = {}
            ^~~~~~~~~~~
src/python/ml/multimodal/multimodal_processor.py:73: error: "None" has no
attribute "initialize"  [attr-defined]
                    await self.quantum_enhancer.initialize()
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/multimodal/multimodal_processor.py:116: error: Argument
"confidence" to "MultimodalOutput" has incompatible type "floating[Any]";
expected "float"  [arg-type]
                    confidence=np.mean(list(confidences.values())),
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/multimodal/multimodal_processor.py:128: error: Incompatible types
in "await" (actual type "dict[Any, Any]", expected type "Awaitable[Any]")
[misc]
            vision_output = await self.vision_processor.process_image(imag...
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/computer_vision/test_quantum_vision.py:24: error: Incompatible
types in assignment (expression has type "Path", variable has type "str")
[assignment]
        log_dir = Path(log_dir)
                  ^~~~~~~~~~~~~
src/python/ml/computer_vision/test_quantum_vision.py:25: error: "str" has no
attribute "mkdir"  [attr-defined]
        log_dir.mkdir(parents=True, exist_ok=True)
        ^~~~~~~~~~~~~
src/python/ml/computer_vision/test_quantum_vision.py:27: error: Unsupported
left operand type for / ("str")  [operator]
        log_file = log_dir / f"testing_{datetime.now().strftime('%Y%m%d_%H...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/computer_vision/test_quantum_vision.py:118: error: Incompatible
types in assignment (expression has type "Path", variable has type "str")
[assignment]
        save_dir = Path(save_dir)
                   ^~~~~~~~~~~~~~
src/python/ml/computer_vision/test_quantum_vision.py:119: error: "str" has no
attribute "mkdir"  [attr-defined]
        save_dir.mkdir(parents=True, exist_ok=True)
        ^~~~~~~~~~~~~~
src/python/ml/computer_vision/test_quantum_vision.py:153: error: Unsupported
left operand type for / ("str")  [operator]
                cv2.imwrite(str(save_dir / f"prediction_{i}.jpg"), image)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scripts/quantum_optimize.py:10: error: Module
"src.quantum_py.optimization.contest_strategy" has no attribute
"QuantumContestOptimizer"; maybe "BleuQuantumContestOptimizer"?  [attr-defined]
    from src.quantum_py.optimization.contest_strategy import QuantumContes...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
bleu_ai/monitoring/performance_tracker.py:35: error: Need type annotation for
"metrics" (hint: "metrics: dict[<type>, <type>] = ...")  [var-annotated]
            self.metrics = {}
            ^~~~~~~~~~~~
bleu_ai/monitoring/performance_tracker.py:128: error: "PerformanceTracker" has
no attribute "n_epochs"  [attr-defined]
                for epoch in range(self.n_epochs):
                                   ^~~~~~~~~~~~~
bleu_ai/features/feature_analyzer.py:78: error: Too many arguments for
"_select_features" of "FeatureAnalyzer"  [call-arg]
                selected = self._select_features(features_scaled, targets)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/features/feature_analyzer.py:81: error: Incompatible types in
assignment (expression has type "ndarray[Any, Any]", variable has type "None")
[assignment]
                self.feature_importances = importance
                                           ^~~~~~~~~~
bleu_ai/features/feature_analyzer.py:82: error: Incompatible types in
assignment (expression has type "ndarray[Any, Any]", variable has type "None")
[assignment]
                self.feature_interactions = interactions
                                            ^~~~~~~~~~~~
bleu_ai/features/feature_analyzer.py:83: error: Incompatible types in
assignment (expression has type "list[int]", variable has type "None")
[assignment]
                self.selected_features = selected
                                         ^~~~~~~~
bleu_ai/features/feature_analyzer.py:111: error: "FeatureAnalyzer" has no
attribute "model"  [attr-defined]
                    explainer = shap.TreeExplainer(self.model)
                                                   ^~~~~~~~~~
bleu_ai/features/feature_analyzer.py:117: error: "FeatureAnalyzer" has no
attribute "model"  [attr-defined]
                        self.model, features, targets, n_repeats=10, rando...
                        ^~~~~~~~~~
bleu_ai/features/feature_analyzer.py:297: error: "FeatureAnalyzer" has no
attribute "config"  [attr-defined]
                if self.config.use_polynomial:
                   ^~~~~~~~~~~
bleu_ai/features/feature_analyzer.py:302: error: "FeatureAnalyzer" has no
attribute "config"  [attr-defined]
                if self.config.use_interactions:
                   ^~~~~~~~~~~
bleu_ai/features/feature_analyzer.py:303: error: "FeatureAnalyzer" has no
attribute "_add_interaction_features"  [attr-defined]
                    transformed = self._add_interaction_features(transform...
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/ai/featureAnalyzer.py:70: error: Incompatible types in assignment
(expression has type "ndarray[Any, Any]", variable has type "None")
[assignment]
                self.feature_importances = importance
                                           ^~~~~~~~~~
bleu_ai/ai/featureAnalyzer.py:73: error: Incompatible types in assignment
(expression has type "ndarray[Any, Any]", variable has type "None")
[assignment]
                self.feature_interactions = self._calculate_interactions(f...
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/services/secrets_manager.py:28: error: Need type annotation for
"last_rotation" (hint: "last_rotation: dict[<type>, <type>] = ...")
[var-annotated]
            self.last_rotation = {}
            ^~~~~~~~~~~~~~~~~~
src/services/secrets_manager.py:43: error: Need type annotation for "secrets"
(hint: "secrets: dict[<type>, <type>] = ...")  [var-annotated]
                self.secrets = {}
                ^~~~~~~~~~~~
src/services/monitoring_service.py:183: error: Module has no attribute
"API_BASE_URL"  [attr-defined]
                    async with session.get(f"{settings.API_BASE_URL}/healt...
                                           ^~~~~~~~~~~~~~~~~~~~~~~~
src/services/monitoring_service.py:305: error: "MonitoringService" has no
attribute "environment"  [attr-defined]
    ...                    {"Name": "Environment", "Value": self.environment}
                                                            ^~~~~~~~~~~~~~~~
src/services/monitoring_service.py:318: error: "MonitoringService" has no
attribute "environment"  [attr-defined]
                    AlarmName=f"{name}-{self.environment}",
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/services/monitoring_service.py:327: error: "MonitoringService" has no
attribute "environment"  [attr-defined]
    ...      Dimensions=[{"Name": "Environment", "Value": self.environment}],
                                                          ^~~~~~~~~~~~~~~~
src/services/monitoring_service.py:338: error: "MonitoringService" has no
attribute "environment"  [attr-defined]
    ...      Dimensions=[{"Name": "Environment", "Value": self.environment}],
                                                          ^~~~~~~~~~~~~~~~
src/quantum_py/quantum/self_learning.py:194: error: "float" has no attribute
"performance_score"  [attr-defined]
                m.performance_score for m in self.performance_history[-5:]
                ^~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/self_learning.py:208: error: Incompatible return value
type (got "floating[Any]", expected "float")  [return-value]
            return np.mean(recent_learning)
                   ^~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:46: error: Cannot
instantiate abstract class "QuantumProcessor" with abstract attribute
"apply_error_correction"  [abstract]
            self.quantum_processor = QuantumProcessor()
                                     ^~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:57: error: Need
type annotation for "adaptation_history" (hint:
"adaptation_history: list[<type>] = ...")  [var-annotated]
            self.adaptation_history = []
            ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:58: error: Need
type annotation for "optimization_history" (hint:
"optimization_history: list[<type>] = ...")  [var-annotated]
            self.optimization_history = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:65: error:
Incompatible types in "await" (actual type "ndarray[Any, Any]", expected type
"Awaitable[Any]")  [misc]
                quantum_features = await self._apply_quantum_attention(
                                   ^
src/quantum_py/quantum/intelligence/quantum_intelligence.py:70: error:
"_update_quantum_memory" of "QuantumIntelligence" does not return a value (it
only ever returns None)  [func-returns-value]
                await self._update_quantum_memory(quantum_features)
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:85: error:
Incompatible types in "await" (actual type "float", expected type
"Awaitable[Any]")  [misc]
            self.intelligence_score = await self._calculate_intelligence_s...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/quantum_py/quantum/intelligence/quantum_intelligence.py:88: error:
"_adapt_intelligence" of "QuantumIntelligence" does not return a value (it only
ever returns None)  [func-returns-value]
                await self._adapt_intelligence()
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:134: error:
Incompatible types in "await" (actual type "ndarray[Any, Any]", expected type
"Awaitable[Any]")  [misc]
                    quantum_state = await self._apply_quantum_attention(
                                    ^
src/quantum_py/quantum/intelligence/quantum_intelligence.py:140: error:
"QuantumIntelligence" has no attribute "_query_quantum_memory"; maybe
"_update_quantum_memory" or "quantum_memory"?  [attr-defined]
                    memory_state = await self._query_quantum_memory(quantu...
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:163: error:
"QuantumIntelligence" has no attribute "_apply_quantum_transformations"; maybe
"_apply_quantum_attention"?  [attr-defined]
            quantum_features = await self._apply_quantum_transformations(q...
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:176: error:
"QuantumIntelligence" has no attribute "_update_attention_weights"
[attr-defined]
                attention_weights = self._update_attention_weights(
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/intelligence/quantum_intelligence.py:206: error:
"QuantumProcessor" has no attribute "optimize_parameters"  [attr-defined]
            optimization_results = await self.quantum_processor.optimize_p...
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/quantum_py/quantum/intelligence/quantum_intelligence.py:272: error:
Incompatible return value type (got "floating[Any]", expected "float")
[return-value]
            return np.mean([r.get("score", 0.0) for r in self.optimization...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/quantum_py/quantum/intelligence/quantum_intelligence.py:281: error:
Incompatible return value type (got "floating[Any] | float", expected "float")
[return-value]
            return np.mean(scores) if scores else 0.0
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/hybrid/test_xgboost_quantum_hybrid.py:134: error: Unused
"type: ignore" comment  [unused-ignore]
        hybrid_model.enhanced_xgb.optimize_hyperparameters = mock_optimize...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/quantum_py/quantum/hybrid/test_xgboost_quantum_hybrid.py:172: error: Unused
"type: ignore" comment  [unused-ignore]
        )  # type: ignore
        ^~~~~~~~~~~~~~~~
src/quantum_py/quantum/hybrid/test_xgboost_quantum_hybrid.py:177: error: Unused
"type: ignore" comment  [unused-ignore]
        hybrid_model.enhanced_xgb.predict = Mock(  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/hybrid/test_xgboost_quantum_hybrid.py:184: error: Unused
"type: ignore" comment  [unused-ignore]
        hybrid_model.enhanced_xgb.optimize_hyperparameters = Mock(  # type...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/quantum_py/quantum/hybrid/test_xgboost_quantum_hybrid.py:191: error: Unused
"type: ignore" comment  [unused-ignore]
        hybrid_model.enhanced_xgb.predict = Mock(  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/quantum/hybrid/test_xgboost_quantum_hybrid.py:198: error: Unused
"type: ignore" comment  [unused-ignore]
        hybrid_model.enhanced_xgb.fit = Mock(  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/quantum_intelligence.py:46: error: Cannot
instantiate abstract class "QuantumProcessor" with abstract attribute
"apply_error_correction"  [abstract]
            self.processor = QuantumProcessor()
                             ^~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/feature_analyzer.py:81: error: Unsupported right
operand type for in ("list[str] | None")  [operator]
                if "autoencoder" in self.config.methods:
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/feature_analyzer.py:357: error: Incompatible return
value type (got "Any | FeatureAnalysisConfig", expected "dict[Any, Any]")
[return-value]
            return self.config.dict() if hasattr(self.config, "dict") else...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/deep_learning/explainability_engine.py:114: error: Incompatible
types in assignment (expression has type "list[str]", variable has type "None")
[assignment]
                self.feature_names = feature_names or [
                                     ^
src/python/ml/deep_learning/explainability_engine.py:177: error: "None" has no
attribute "shap_values"  [attr-defined]
            shap_values = self.explainer.shap_values(x)
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/explainability_engine.py:261: error: No overload
variant of "zip" matches argument types "None", "Any"  [call-overload]
                "feature_importance": dict(zip(self.feature_names, importa...
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/deep_learning/explainability_engine.py:261: note: Possible overload variants:
src/python/ml/deep_learning/explainability_engine.py:261: note:     def [_T_co] zip(*, strict: bool = ...) -> zip[Any]
src/python/ml/deep_learning/explainability_engine.py:261: note:     def [_T_co, _T1] zip(Iterable[_T1], /, *, strict: bool = ...) -> zip[tuple[_T1]]
src/python/ml/deep_learning/explainability_engine.py:261: note:     def [_T_co, _T1, _T2] zip(Iterable[_T1], Iterable[_T2], /, *, strict: bool = ...) -> zip[tuple[_T1, _T2]]
src/python/ml/deep_learning/explainability_engine.py:261: note:     def [_T_co, _T1, _T2, _T3] zip(Iterable[_T1], Iterable[_T2], Iterable[_T3], /, *, strict: bool = ...) -> zip[tuple[_T1, _T2, _T3]]
src/python/ml/deep_learning/explainability_engine.py:261: note:     def [_T_co, _T1, _T2, _T3, _T4] zip(Iterable[_T1], Iterable[_T2], Iterable[_T3], Iterable[_T4], /, *, strict: bool = ...) -> zip[tuple[_T1, _T2, _T3, _T4]]
src/python/ml/deep_learning/explainability_engine.py:261: note:     def [_T_co, _T1, _T2, _T3, _T4, _T5] zip(Iterable[_T1], Iterable[_T2], Iterable[_T3], Iterable[_T4], Iterable[_T5], /, *, strict: bool = ...) -> zip[tuple[_T1, _T2, _T3, _T4, _T5]]
src/python/ml/deep_learning/explainability_engine.py:261: note:     def [_T_co] zip(Iterable[Any], Iterable[Any], Iterable[Any], Iterable[Any], Iterable[Any], Iterable[Any], /, *iterables: Iterable[Any], strict: bool = ...) -> zip[tuple[Any, ...]]
src/python/ml/deep_learning/explainability_engine.py:378: error:
"ExplainabilityEngine" has no attribute "_create_output_directory"
[attr-defined]
            await self._create_output_directory()
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/explainability_engine.py:383: error:
"ExplainabilityEngine" has no attribute "_has_valid_partial_dependence"
[attr-defined]
            if self._has_valid_partial_dependence(explanations):
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/deep_learning/explainability_engine.py:466: error: Incompatible
types in assignment (expression has type "list[str]", variable has type "None")
[assignment]
                self.feature_names = [f"feature_{i}" for i in range(total_...
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/deep_learning/explainability_engine.py:675: error: Argument
"local_importance" to "Explanation" has incompatible type "Any | None"; expected
"ndarray[Any, Any]"  [arg-type]
                            np.frombuffer(exp["local_importance"])
                            ^
src/python/ml/deep_learning/explainability_engine.py:680: error: Argument
"global_importance" to "Explanation" has incompatible type "Any | None";
expected "ndarray[Any, Any]"  [arg-type]
                            np.frombuffer(exp["global_importance"])
                            ^
src/python/ml/deep_learning/explainability_engine.py:685: error: Argument
"feature_interactions" to "Explanation" has incompatible type "Any | None";
expected "ndarray[Any, Any]"  [arg-type]
                            np.frombuffer(exp["feature_interactions"])
                            ^
src/python/ml/deep_learning/explainability_engine.py:704: error:
"ExplainabilityEngine" has no attribute "_create_feature_importance_plot"; maybe
"_generate_feature_importance_plot" or "_generate_feature_importance"?
[attr-defined]
                components["feature_importance"] = self._create_feature_im...
                                                   ^~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/deep_learning/explainability_engine.py:709: error:
"ExplainabilityEngine" has no attribute "_create_attention_visualization"
[attr-defined]
                components["attention"] = self._create_attention_visualiza...
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/ml/deep_learning/explainability_engine.py:712: error:
"ExplainabilityEngine" has no attribute "_create_activation_maps"
[attr-defined]
                components["activations"] = self._create_activation_maps(d...
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/python/ml/benchmarking/case_studies.py:141: error: Value of type
"Collection[str]" is not indexable  [index]
                f"Training Time Improvement: "
                ^
src/python/backend/core/aws.py:31: error: Type of TypedDict is ambiguous, none
of ("EndpointConfigurationTypeDef", "EndpointConfigurationOutputTypeDef")
matches cleanly  [misc]
                    endpointConfiguration={"types": [self.config.endpoint_...
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/backend/core/aws.py:31: error: Argument "endpointConfiguration" to
"create_rest_api" of "APIGatewayClient" has incompatible type
"dict[str, list[str]]"; expected
"EndpointConfigurationTypeDef | EndpointConfigurationOutputTypeDef"  [arg-type]
                    endpointConfiguration={"types": [self.config.endpoint_...
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/python/backend/core/aws.py:104: error: Argument 4 to "put_integration" of
"APIGatewayClient" has incompatible type "**dict[str, object]"; expected
"Literal['AWS', 'AWS_PROXY', 'HTTP', 'HTTP_PROXY', 'MOCK']"  [arg-type]
                    **integration_request,
                      ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/aws.py:104: error: Argument 4 to "put_integration" of
"APIGatewayClient" has incompatible type "**dict[str, object]"; expected "str"
[arg-type]
                    **integration_request,
                      ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/aws.py:104: error: Argument 4 to "put_integration" of
"APIGatewayClient" has incompatible type "**dict[str, object]"; expected
"Literal['INTERNET', 'VPC_LINK']"  [arg-type]
                    **integration_request,
                      ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/aws.py:104: error: Argument 4 to "put_integration" of
"APIGatewayClient" has incompatible type "**dict[str, object]"; expected
"Mapping[str, str]"  [arg-type]
                    **integration_request,
                      ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/aws.py:104: error: Argument 4 to "put_integration" of
"APIGatewayClient" has incompatible type "**dict[str, object]"; expected
"Sequence[str]"  [arg-type]
                    **integration_request,
                      ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/aws.py:104: error: Argument 4 to "put_integration" of
"APIGatewayClient" has incompatible type "**dict[str, object]"; expected
"Literal['CONVERT_TO_BINARY', 'CONVERT_TO_TEXT']"  [arg-type]
                    **integration_request,
                      ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/aws.py:104: error: Argument 4 to "put_integration" of
"APIGatewayClient" has incompatible type "**dict[str, object]"; expected "int"
[arg-type]
                    **integration_request,
                      ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/aws.py:104: error: Argument 4 to "put_integration" of
"APIGatewayClient" has incompatible type "**dict[str, object]"; expected
"TlsConfigTypeDef"  [arg-type]
                    **integration_request,
                      ^~~~~~~~~~~~~~~~~~~
src/python/backend/core/aws.py:170: error: Argument "type" to
"create_authorizer" of "APIGatewayClient" has incompatible type "str"; expected
"Literal['COGNITO_USER_POOLS', 'REQUEST', 'TOKEN']"  [arg-type]
                    type=self.config.authorizer_type,
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/train_xgboost.py:103: error: "AdvancedDataProcessor" has no attribute
"_post_process"  [attr-defined]
            features_processed = self._post_process(features_quantum)
                                 ^~~~~~~~~~~~~~~~~~
src/ml/train_xgboost.py:308: error: Need type annotation for "results"
[var-annotated]
                results = {"accuracy": [], "auc": [], "f1": []}
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ml/train_xgboost.py:336: error: Value expression in dictionary
comprehension has incompatible type "floating[Any]"; expected type "float"
[misc]
                return {metric: np.mean(values) for metric, values in resu...
                                ^~~~~~~~~~~~~~~
src/ml/factory.py:125: error: "object" has no attribute "copy"  [attr-defined]
            config = default_config.copy()
                     ^~~~~~~~~~~~~~~~~~~
src/ml/factory.py:134: error: Cannot instantiate abstract class "ModelService"
with abstract attribute "execute"  [abstract]
                return ModelService(model)
                       ^~~~~~~~~~~~~~~~~~~
src/ml/factory.py:169: error: "object" has no attribute "copy"  [attr-defined]
            return cls.DEFAULT_CONFIGS[model_type].copy()
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/models/xgboost_model.py:73: error: Need type annotation for "metrics"
(hint: "metrics: dict[<type>, <type>] = ...")  [var-annotated]
            self.metrics = {}
            ^~~~~~~~~~~~
bleu_ai/models/xgboost_model.py:254: error: "None" has no attribute
"plot_feature_importance"  [attr-defined]
                importance_fig = self.visualizer.plot_feature_importance(
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/models/xgboost_model.py:265: error: "None" has no attribute
"plot_roc_curve"  [attr-defined]
                roc_fig = self.visualizer.plot_roc_curve(targets, predicti...
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/models/xgboost_model.py:269: error: "None" has no attribute
"plot_learning_curves"  [attr-defined]
                learning_fig = self.visualizer.plot_learning_curves(
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bleu_ai/models/xgboost_model.py:276: error: "None" has no attribute
"plot_uncertainty_distribution"  [attr-defined]
                    uncertainty_fig = self.visualizer.plot_uncertainty_dis...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
bleu_ai/models/xgboost_model.py:356: error: "None" has no attribute "transform"
 [attr-defined]
            features_scaled = self.scaler.transform(features)
                              ^~~~~~~~~~~~~~~~~~~~~
bleu_ai/models/xgboost_model.py:365: error: "None" has no attribute "predict"
[attr-defined]
            return self.model.predict(features_scaled)
                   ^~~~~~~~~~~~~~~~~~
bleu_ai/models/xgboost_model.py:379: error: "None" has no attribute
"predict_proba"  [attr-defined]
                proba = self.model.predict_proba(features_scaled)
                        ^~~~~~~~~~~~~~~~~~~~~~~~
tests/quantum/test_quantum_processor.py:10: error: Module
"src.quantum_py.quantum.self_learning" has no attribute "QuantumSelfLearning"
[attr-defined]
    from src.quantum_py.quantum.self_learning import QuantumSelfLearning
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:53: error: Need type
annotation for "strategy_performance" (hint:
"strategy_performance: list[<type>] = ...")  [var-annotated]
            self.strategy_performance = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:54: error: Need type
annotation for "market_state" (hint: "market_state: dict[<type>, <type>] = ...")
 [var-annotated]
            self.market_state = {}
            ^~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:75: error: Argument 1 to
"_generate_strategy_options" of "StrategicIntelligence" has incompatible type
"dict[Any, Any]"; expected "ndarray[Any, Any]"  [arg-type]
                    quantum_features, constraints
                    ^~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:89: error: Incompatible
types in assignment (expression has type "dict[Any, Any]", variable has type
"None")  [assignment]
                self.current_strategy = optimal_strategy
                                        ^~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:110: error:
"StrategicIntelligence" has no attribute "_process_market_data"  [attr-defined]
                market_features = await self._process_market_data(market_d...
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:118: error:
"StrategicIntelligence" has no attribute "_simulate_strategy"  [attr-defined]
                simulation_results = await self._simulate_strategy(
                                           ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:142: error:
"StrategicIntelligence" has no attribute "_analyze_adaptation_needs"
[attr-defined]
                adaptation_needs = self._analyze_adaptation_needs(
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:147: error:
"StrategicIntelligence" has no attribute "_generate_adaptation_options"; maybe
"_generate_strategy_options"?  [attr-defined]
                adaptation_options = await self._generate_adaptation_optio...
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:152: error:
"StrategicIntelligence" has no attribute "_evaluate_adaptations"  [attr-defined]
                evaluation_results = await self._evaluate_adaptations(
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:157: error:
"StrategicIntelligence" has no attribute "_select_optimal_adaptation"; maybe
"_select_optimal_strategy"?  [attr-defined]
                optimal_adaptation = await self._select_optimal_adaptation...
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:162: error:
"StrategicIntelligence" has no attribute "_apply_adaptation"  [attr-defined]
                await self._apply_adaptation(optimal_adaptation)
                      ^~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:204: error:
"StrategicIntelligence" has no attribute "_generate_base_options"; maybe
"_generate_strategy_options"?  [attr-defined]
            base_options = self._generate_base_options(constraints)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:209: error:
"StrategicIntelligence" has no attribute "_enhance_option"  [attr-defined]
                enhanced_option = await self._enhance_option(option, quant...
                                        ^~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:223: error:
"StrategicIntelligence" has no attribute "_simulate_strategy"  [attr-defined]
                simulation = await self._simulate_strategy(
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:230: error: "object" has
no attribute "append"  [attr-defined]
                results["performance"].append(metrics)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:233: error:
"StrategicIntelligence" has no attribute "_aggregate_metrics"  [attr-defined]
            results["metrics"] = self._aggregate_metrics(results["performa...
                                 ^~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:234: error:
"StrategicIntelligence" has no attribute "_calculate_confidence_score"
[attr-defined]
            results["confidence"] = self._calculate_confidence_score(resul...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:243: error:
"StrategicIntelligence" has no attribute "_filter_by_confidence"  [attr-defined]
            valid_strategies = self._filter_by_confidence(
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/strategic_intelligence.py:248: error:
"StrategicIntelligence" has no attribute "_rank_strategies"  [attr-defined]
            ranked_strategies = self._rank_strategies(
                                ^~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:56: error: Need type
annotation for "market_state" (hint: "market_state: dict[<type>, <type>] = ...")
 [var-annotated]
            self.market_state = {}
            ^~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:57: error: Need type
annotation for "historical_analysis" (hint:
"historical_analysis: list[<type>] = ...")  [var-annotated]
            self.historical_analysis = []
            ^~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:58: error: Need type
annotation for "current_patterns" (hint: "current_patterns: list[<type>] = ...")
 [var-annotated]
            self.current_patterns = []
            ^~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:59: error: Need type
annotation for "risk_metrics" (hint: "risk_metrics: dict[<type>, <type>] = ...")
 [var-annotated]
            self.risk_metrics = {}
            ^~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:130: error: Argument 1 to
"predict_optimal_actions" of "QuantumIntelligence" has incompatible type
"dict[Any, Any]"; expected "ndarray[Any, Any]"  [arg-type]
                        quantum_features
                        ^~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:135: error:
"MarketIntelligence" has no attribute "_analyze_prediction_confidence"
[attr-defined]
                confidence_analysis = self._analyze_prediction_confidence(
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:158: error:
"MarketIntelligence" has no attribute "_detect_quantum_patterns"; maybe
"detect_patterns"?  [attr-defined]
                patterns = await self._detect_quantum_patterns(
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:163: error:
"MarketIntelligence" has no attribute "_analyze_pattern_significance"
[attr-defined]
                significance = self._analyze_pattern_significance(patterns...
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:171: error:
"MarketIntelligence" has no attribute "_generate_pattern_recommendations"
[attr-defined]
                    "recommendations": self._generate_pattern_recommendati...
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:185: error:
"MarketIntelligence" has no attribute "_preprocess_price_data"; maybe
"_process_market_data"?  [attr-defined]
                processed["price"] = self._preprocess_price_data(processed...
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:190: error:
"MarketIntelligence" has no attribute "_preprocess_volume_data"  [attr-defined]
                processed["volume"] = self._preprocess_volume_data(process...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:194: error:
"MarketIntelligence" has no attribute "_preprocess_news_data"  [attr-defined]
                processed["news"] = self._preprocess_news_data(market_data...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:197: error:
"MarketIntelligence" has no attribute "_extract_features"  [attr-defined]
            processed["features"] = self._extract_features(processed)
                                    ^~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:204: error:
"MarketIntelligence" has no attribute "_detect_trends"; maybe "detect_patterns"?
 [attr-defined]
                "trends": self._detect_trends(price_data),
                          ^~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:205: error:
"MarketIntelligence" has no attribute "_detect_support_resistance"
[attr-defined]
                "support_resistance": self._detect_support_resistance(pric...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:206: error:
"MarketIntelligence" has no attribute "_calculate_volatility"  [attr-defined]
                "volatility": self._calculate_volatility(price_data),
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:213: error:
"MarketIntelligence" has no attribute "_detect_volume_trends"  [attr-defined]
                "trends": self._detect_volume_trends(volume_data),
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:214: error:
"MarketIntelligence" has no attribute "_detect_volume_anomalies"  [attr-defined]
                "anomalies": self._detect_volume_anomalies(volume_data),
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:215: error:
"MarketIntelligence" has no attribute "_analyze_price_volume_correlation"
[attr-defined]
                "correlations": self._analyze_price_volume_correlation(vol...
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:222: error:
"MarketIntelligence" has no attribute "_calculate_sentiment_score"
[attr-defined]
                "overall_score": self._calculate_sentiment_score(news_data...
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:223: error:
"MarketIntelligence" has no attribute "_detect_sentiment_trends"  [attr-defined]
                "trends": self._detect_sentiment_trends(news_data),
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:224: error:
"MarketIntelligence" has no attribute "_analyze_sentiment_topics"; maybe
"_analyze_sentiment"?  [attr-defined]
                "topics": self._analyze_sentiment_topics(news_data),
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:231: error:
"MarketIntelligence" has no attribute "_calculate_price_volume_correlation"
[attr-defined]
                "price_volume": self._calculate_price_volume_correlation(p...
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:232: error:
"MarketIntelligence" has no attribute "_calculate_cross_asset_correlation"
[attr-defined]
                "cross_asset": self._calculate_cross_asset_correlation(pro...
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:233: error:
"MarketIntelligence" has no attribute "_calculate_temporal_correlation"
[attr-defined]
                "temporal": self._calculate_temporal_correlation(processed...
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:248: error:
"MarketIntelligence" has no attribute "_analyze_quantum_patterns"; maybe
"_analyze_volume_patterns"?  [attr-defined]
                "enhanced_patterns": self._analyze_quantum_patterns(quantu...
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:249: error:
"MarketIntelligence" has no attribute "_analyze_quantum_correlations"; maybe
"_analyze_correlations"?  [attr-defined]
                "quantum_correlations": self._analyze_quantum_correlations...
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:252: error:
"MarketIntelligence" has no attribute "_calculate_entanglement_metrics"
[attr-defined]
                "entanglement_metrics": self._calculate_entanglement_metri...
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:287: error:
"MarketIntelligence" has no attribute "_calculate_volatility_risk"
[attr-defined]
                "volatility": self._calculate_volatility_risk(analysis),
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:288: error:
"MarketIntelligence" has no attribute "_calculate_value_at_risk"  [attr-defined]
                "var": self._calculate_value_at_risk(analysis),
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:289: error:
"MarketIntelligence" has no attribute "_calculate_tail_risk"  [attr-defined]
                "tail_risk": self._calculate_tail_risk(analysis),
                             ^~~~~~~~~~~~~~~~~~~~~~~~~
src/quantum_py/intelligence/market_intelligence.py:290: error:
"MarketIntelligence" has no attribute "_calculate_liquidity_risk"
[attr-defined]
                "liquidity_risk": self._calculate_liquidity_risk(analysis)...
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/services/api_service.py:177: error: Need type annotation for
"endpoint_usage" (hint: "endpoint_usage: dict[<type>, <type>] = ...")
[var-annotated]
            endpoint_usage = {}
            ^~~~~~~~~~~~~~
src/services/api_service.py:204: error: "MarketIntelligence" has no attribute
"get_market_analysis"  [attr-defined]
            market_data = await self.market_intelligence.get_market_analys...
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/services/api_service.py:207: error: "StrategicIntelligence" has no
attribute "get_strategic_insights"  [attr-defined]
            strategic_insights = await self.strategic_intelligence.get_str...
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/services/api_service.py:210: error: "QuantumIntelligence" has no attribute
"get_quantum_analysis"  [attr-defined]
            quantum_analysis = await self.quantum_intelligence.get_quantum...
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/services/api_service.py:258: error: Unused "type: ignore" comment
[unused-ignore]
                "uptime": time.time() - self.start_time,  # type: ignore[a...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/services/api_service.py:314: error: Need type annotation for
"endpoint_times" (hint: "endpoint_times: dict[<type>, <type>] = ...")
[var-annotated]
            endpoint_times = {}
            ^~~~~~~~~~~~~~
src/services/subscription_service.py:55: error: Cannot instantiate abstract
class "EmailService" with abstract attribute "execute"  [abstract]
            self.email_service = EmailService()
                                 ^~~~~~~~~~~~~~
src/services/subscription_service.py:56: error: Cannot instantiate abstract
class "MonitoringService" with abstract attribute "execute"  [abstract]
            self.monitoring_service = MonitoringService()
                                      ^~~~~~~~~~~~~~~~~~~
src/services/subscription_service.py:57: error: Cannot instantiate abstract
class "APIService" with abstract attribute "execute"  [abstract]
            self.api_service = APIService(db)
                               ^~~~~~~~~~~~~~
src/services/subscription_service.py:427: error: Unsupported right operand type
for in ("object")  [operator]
                if service_type not in available_features:
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/services/__init__.py:24: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
    auth_service = AuthService()
                   ^~~~~~~~~~~~~
src/services/__init__.py:24: error: Missing positional argument "db" in call to
"AuthService"  [call-arg]
    auth_service = AuthService()
                   ^~~~~~~~~~~~~
src/services/__init__.py:25: error: Cannot instantiate abstract class
"EmailService" with abstract attribute "execute"  [abstract]
    email_service = EmailService()
                    ^~~~~~~~~~~~~~
src/services/__init__.py:26: error: Cannot instantiate abstract class
"MonitoringService" with abstract attribute "execute"  [abstract]
    monitoring_service = MonitoringService()
                         ^~~~~~~~~~~~~~~~~~~
src/services/__init__.py:27: error: Missing positional argument "api_key" in
call to "PaymentService"  [call-arg]
    payment_service = PaymentService()
                      ^~~~~~~~~~~~~~~~
src/services/__init__.py:28: error: Missing positional argument "redis" in call
to "RateLimitingService"  [call-arg]
    rate_limiting_service = RateLimitingService()
                            ^~~~~~~~~~~~~~~~~~~~~
src/services/__init__.py:29: error: Missing positional argument "db" in call to
"UserService"  [call-arg]
    user_service = UserService()
                   ^~~~~~~~~~~~~
src/services/__init__.py:39: error: Cannot instantiate abstract class
"APIService" with abstract attribute "execute"  [abstract]
            api_service = APIService(db)
                          ^~~~~~~~~~~~~~
src/services/__init__.py:40: error: Cannot instantiate abstract class
"APITokenService" with abstract attribute "execute"  [abstract]
            api_token_service = APITokenService(db)
                                ^~~~~~~~~~~~~~~~~~~
src/services/__init__.py:41: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:11: error: Module "src.services.auth_service" has no
attribute "get_current_user"  [attr-defined]
    from src.services.auth_service import get_current_user
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:25: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:42: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:67: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:87: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:108: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:127: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:157: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/routes/subscription.py:176: error: Cannot instantiate abstract class
"SubscriptionService" with abstract attribute "execute"  [abstract]
            subscription_service = SubscriptionService(db)
                                   ^~~~~~~~~~~~~~~~~~~~~~~
src/api/subscription_routes.py:6: error: Module "src.models.subscription" has
no attribute "SubscriptionUpgrade"; maybe "SubscriptionUpdate",
"SubscriptionCreate", or "SubscriptionBase"?  [attr-defined]
    from ..models.subscription import (
    ^
src/api/subscription_routes.py:6: error: Module "src.models.subscription" has
no attribute "UsageMetrics"  [attr-defined]
    from ..models.subscription import (
    ^
src/api/subscription_routes.py:12: error: Module
"src.services.subscription_service" has no attribute "subscription_service";
maybe "SubscriptionService"?  [attr-defined]
    from ..services.subscription_service import subscription_service
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/api/subscription_routes.py:13: error: Module "src.services.user_service"
has no attribute "user_service"; maybe "UserService"?  [attr-defined]
    from ..services.user_service import user_service
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/api/subscription_routes.py:89: error: Name "SubscriptionUpgrade" already
defined (possibly by an import)  [no-redef]
    class SubscriptionUpgrade(BaseModel):
    ^
tests/test_api_tokens.py:31: error: Too many arguments for "init_services"
[call-arg]
        return init_services(app, db, mock_redis)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tests/test_api_tokens.py:132: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
        auth_service = AuthService(db)
                       ^~~~~~~~~~~~~~~
tests/test_api_tokens.py:167: error: Cannot instantiate abstract class
"AuthService" with abstract attribute "execute"  [abstract]
        auth_service = AuthService(db)
                       ^~~~~~~~~~~~~~~
tests/test_api_tokens.py:221: error: Cannot instantiate abstract class
"APITokenService" with abstract attribute "execute"  [abstract]
        token_service = APITokenService(db)
                        ^~~~~~~~~~~~~~~~~~~
tests/test_api_tokens.py:286: error: Cannot instantiate abstract class
"APITokenService" with abstract attribute "execute"  [abstract]
        token_service = APITokenService(db)
                        ^~~~~~~~~~~~~~~~~~~
Found 458 errors in 91 files (checked 317 source files)
