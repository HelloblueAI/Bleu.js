#!/usr/bin/env python3
"""
Security Vulnerability Fix Script for Bleu.js

This script fixes all identified security vulnerabilities by updating packages
to their secure versions and creating updated requirements files.
"""

import subprocess
import sys
import os
from pathlib import Path

# Vulnerable packages and their secure versions
VULNERABILITY_FIXES = {
    # Critical security fixes
    "pycryptodomex": ">=3.19.1",
    "oauthlib": ">=3.2.1",
    "lxml": ">=4.9.1",
    "idna": ">=3.7",
    "future": ">=0.18.3",
    "fonttools": ">=4.43.0",
    "configobj": ">=5.0.9",
    "certifi": ">=2023.7.22",
    "bottle": ">=0.12.20",
    "pyjwt": ">=2.10.1",
    "mako": ">=1.2.2",
    "glances": ">=3.4.0",
    "tornado": ">=6.5.0",
    "starlette": ">=0.40.0",
    "python-jose": ">=3.5.1",
    "ecdsa": ">=0.20.0",
    "cryptography": ">=44.0.1",
}

def run_command(command, check=True):
    """Run a command and return the result."""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if check and result.returncode != 0:
            print(f"Error running command: {command}")
            print(f"Error: {result.stderr}")
            return False
        return result
    except Exception as e:
        print(f"Exception running command {command}: {e}")
        return False

def update_requirements_file(file_path):
    """Update a requirements file with secure package versions."""
    if not os.path.exists(file_path):
        print(f"File {file_path} does not exist, skipping...")
        return
    
    print(f"Updating {file_path}...")
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Update each vulnerable package
    for package, secure_version in VULNERABILITY_FIXES.items():
        # Handle different package name formats
        patterns = [
            f"{package}>=",
            f"{package}==",
            f"{package}~=",
            f"{package}<",
            f"{package}>",
        ]
        
        for pattern in patterns:
            if pattern in content:
                # Find the line with this package
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.strip().startswith(package):
                        # Extract the current version constraint
                        if '>=' in line:
                            lines[i] = line.split('>=')[0] + secure_version
                        elif '==' in line:
                            lines[i] = line.split('==')[0] + secure_version
                        elif '~=' in line:
                            lines[i] = line.split('~=')[0] + secure_version
                        elif '<' in line:
                            lines[i] = line.split('<')[0] + secure_version
                        elif '>' in line:
                            lines[i] = line.split('>')[0] + secure_version
                        else:
                            # No version constraint, add one
                            lines[i] = f"{package}{secure_version}"
                        break
                content = '\n'.join(lines)
                break
    
    # Write the updated content
    with open(file_path, 'w') as f:
        f.write(content)
    
    print(f"✅ Updated {file_path}")

def create_secure_requirements():
    """Create a new secure requirements file."""
    secure_content = """# Secure Requirements for Bleu.js
# Generated by security vulnerability fix script

# Core dependencies
tensorflow>=2.16.2; platform_system != "Darwin"
tensorflow-macos>=2.16.2; platform_system == "Darwin"
tensorflow-metal>=0.7.0; platform_system == "Darwin" and platform_machine == "arm64"
numpy>=1.24.3
h5py>=3.10.0
protobuf>=3.20.3
tensorboard>=2.16.0,<2.17.0
opencv-python>=4.9.0
scikit-learn>=1.2.2
matplotlib>=3.7.1
seaborn>=0.12.2
keras>=3.0.0

# AWS and Elastic dependencies
boto3>=1.24.0
elasticsearch>=8.12.0
elasticsearch-dsl>=8.12.0
awscli>=1.25.0
aws-sam-cli>=1.120.0
aws-lambda-powertools>=2.30.0

# Quantum computing dependencies
qiskit>=0.44.0
cirq>=1.2.0
pennylane>=0.32.0
optuna>=3.2.0

# Deep learning dependencies
torch>=2.2.2
torchvision>=0.17.2
torchaudio>=2.2.2
transformers>=4.37.0

# Data processing and visualization
pandas>=2.0.0
pillow>=10.2.0
albumentations>=1.4.0

# API and web framework
fastapi==0.109.2
uvicorn==0.27.1
python-multipart>=0.0.9
pydantic[email]==2.6.1

# Database
sqlalchemy==2.0.23
alembic==1.13.1
psycopg2-binary==2.9.9

# Testing and development
pytest>=7.3.1
pytest-cov>=4.1.0
pytest-asyncio==0.21.1
pylint==3.0.2
black>=23.3.0
isort>=5.10.1
flake8>=6.0.0
mypy>=1.3.0
bandit>=1.7.5

# Logging and monitoring
python-json-logger>=2.0.7
prometheus-client>=0.19.0
opentelemetry-api>=1.22.0
opentelemetry-sdk>=1.22.0
structlog>=24.1.0

# Security - Updated to secure versions
python-jose[cryptography]>=3.5.1
passlib[bcrypt]==1.7.4
python-dotenv>=0.20.0
jinja2>=3.1.3
httpx>=0.27.0
cryptography>=44.0.1
pyjwt>=2.10.1
oauthlib>=3.2.1
certifi>=2023.7.22
idna>=3.7
lxml>=4.9.1
starlette>=0.40.0
tornado>=6.5.0
ecdsa>=0.20.0

# Utilities
tqdm>=4.66.1
requests>=2.32.4
urllib3>=2.5.0
aiohttp>=3.9.3
tenacity>=8.2.3

# Additional dependencies
qiskit-aer>=0.13.0
"""
    
    with open('requirements-secure.txt', 'w') as f:
        f.write(secure_content)
    
    print("✅ Created requirements-secure.txt")

def install_secure_packages():
    """Install secure package versions."""
    print("Installing secure package versions...")
    
    # Install each secure package
    for package, version in VULNERABILITY_FIXES.items():
        if version.startswith('>='):
            install_version = version
        else:
            install_version = version
        
        command = f"pip install {package}{install_version}"
        print(f"Running: {command}")
        result = run_command(command, check=False)
        if result and result.returncode == 0:
            print(f"✅ Installed {package}{install_version}")
        else:
            print(f"⚠️ Failed to install {package}{install_version}")

def run_security_check():
    """Run a final security check."""
    print("\nRunning final security check...")
    result = run_command("safety scan", check=False)
    if result and result.returncode == 0:
        print("✅ Security check passed!")
    else:
        print("⚠️ Some security issues may remain")

def main():
    """Main function to fix all security vulnerabilities."""
    print("🔒 Bleu.js Security Vulnerability Fix Script")
    print("=" * 50)
    
    # Update existing requirements files
    requirements_files = [
        'requirements.txt',
        'src/quantum_py/requirements.txt',
        'python/requirements.txt'
    ]
    
    for req_file in requirements_files:
        update_requirements_file(req_file)
    
    # Create secure requirements file
    create_secure_requirements()
    
    # Install secure packages
    install_secure_packages()
    
    # Run final security check
    run_security_check()
    
    print("\n🎉 Security vulnerability fix completed!")
    print("Please review the changes and test your application.")

if __name__ == "__main__":
    main() 