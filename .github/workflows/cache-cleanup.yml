name: Intelligent Cache Management

on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:      # Manual trigger
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]
    branches: [main]

jobs:
  analyze-and-cleanup:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      issues: write
      checks: write

    steps:
      - name: Check GitHub Rate Limits
        id: check-limits
        run: |
          echo "Checking GitHub API rate limits..."
          gh api rate_limit | jq .rate

      - name: Create Status Check
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;

            await github.rest.checks.create({
              owner,
              repo,
              name: 'Cache Management Status',
              head_sha: sha,
              status: 'in_progress',
              started_at: new Date().toISOString()
            });

      - name: Cache Analysis and Cleanup
        id: cache-cleanup
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH="main"

          # Initialize monitoring file
          echo "Cache Analysis Report - $(date)" > cache_report.txt
          echo "=================================" >> cache_report.txt

          # Function to convert size to MB
          convert_to_mb() {
            local size="$1"
            if [[ $size =~ ([0-9.]+)[[:space:]]*(GB|MB) ]]; then
              local number="${BASH_REMATCH[1]}"
              local unit="${BASH_REMATCH[2]}"
              if [ "$unit" = "GB" ]; then
                echo "$(echo "$number * 1024" | bc)"
              else
                echo "$number"
              fi
            fi
          }

          # Function to calculate cache score (higher score = more important to keep)
          calculate_cache_score() {
            local cache_key="$1"
            local age="$2"
            local size_mb="$3"
            local base_score=100

            # Reduce score based on age
            local age_penalty=$(echo "scale=2; $age * 5" | bc)

            # Reduce score based on size (larger files get lower scores)
            local size_penalty=$(echo "scale=2; $size_mb / 100" | bc)

            # Bonus for important cache types
            local type_bonus=0
            case "$cache_key" in
              *"quantum"*) type_bonus=50 ;; # Quantum operations are expensive to recompute
              *"ml-model"*) type_bonus=40 ;; # ML model caches are valuable
              *"test-results"*) type_bonus=30 ;; # Test results help with debugging
              *"deps"*) type_bonus=20 ;; # Dependencies are important but replaceable
            esac

            echo "$(echo "$base_score - $age_penalty - $size_penalty + $type_bonus" | bc)"
          }

          # Initialize counters
          total_size_mb=0
          cache_count=0
          deleted_count=0
          protected_count=0
          kept_count=0

          echo "Analyzing cache usage patterns..."

          # First pass: Gather statistics
          while read -r line; do
            cache_key=$(echo "$line" | awk '{print $1}')
            size=$(echo "$line" | awk '{print $2, $3}')
            size_mb=$(convert_to_mb "$size")
            total_size_mb=$(echo "$total_size_mb + $size_mb" | bc)
            ((cache_count++))

            echo "Cache: $cache_key" >> cache_report.txt
            echo "Size: $size" >> cache_report.txt
            echo "------------------------" >> cache_report.txt
          done < <(gh actions-cache list -R $REPO -B $BRANCH)

          # Calculate average cache size
          avg_size_mb=$(echo "scale=2; $total_size_mb / $cache_count" | bc)
          echo "Average cache size: ${avg_size_mb}MB" >> cache_report.txt

          # Define dynamic retention rules based on usage patterns
          declare -A retention_rules=(
            ["quantum"]=$([ $avg_size_mb -gt 1000 ] && echo "5" || echo "7")
            ["ml"]=$([ $avg_size_mb -gt 1000 ] && echo "5" || echo "7")
            ["deps"]="14"
            ["build"]="3"
          )

          echo "Applying intelligent cleanup rules..."

          # Second pass: Apply cleanup rules
          while read -r line; do
            cache_key=$(echo "$line" | awk '{print $1}')
            size=$(echo "$line" | awk '{print $2, $3}')
            created_time=$(echo "$line" | grep -oP '\d+ \w+ ago')

            # Convert time to days
            days_old=0
            if [[ $created_time =~ ([0-9]+)[[:space:]]+(hour|hours|day|days|week|weeks|month|months)[[:space:]]+ago ]]; then
              number=${BASH_REMATCH[1]}
              unit=${BASH_REMATCH[2]}
              case $unit in
                hour|hours) days_old=$(echo "scale=2; $number/24" | bc) ;;
                day|days) days_old=$number ;;
                week|weeks) days_old=$(echo "$number * 7" | bc) ;;
                month|months) days_old=$(echo "$number * 30" | bc) ;;
              esac
            fi

            size_mb=$(convert_to_mb "$size")

            # Calculate cache score
            score=$(calculate_cache_score "$cache_key" "$days_old" "$size_mb")

            # Determine retention period
            retention_days=7  # Default
            for pattern in "${!retention_rules[@]}"; do
              if [[ $cache_key == *"$pattern"* ]]; then
                retention_days=${retention_rules[$pattern]}
                break
              fi
            done

            # Safety checks
            if [[ $cache_key == *"Linux-v1"* ]] && [ $(echo "$days_old < 2" | bc -l) -eq 1 ]; then
              echo "üîí Protecting recent cache: $cache_key (Age: $days_old days, Size: $size, Score: $score)" | tee -a cache_report.txt
              ((protected_count++))
              continue
            fi

            # Adaptive retention based on score
            if [ $(echo "$score > 70" | bc -l) -eq 1 ]; then
              retention_days=$(echo "$retention_days * 1.5" | bc)
            fi

            if [ $(echo "$days_old > $retention_days" | bc -l) -eq 1 ]; then
              echo "üóëÔ∏è Deleting cache: $cache_key (Age: $days_old days, Size: $size, Score: $score)" | tee -a cache_report.txt
              gh actions-cache delete $cache_key -R $REPO -B $BRANCH --confirm
              ((deleted_count++))
            else
              echo "‚úÖ Keeping cache: $cache_key (Age: $days_old days, Size: $size, Score: $score)" | tee -a cache_report.txt
              ((kept_count++))
            fi
          done < <(gh actions-cache list -R $REPO -B $BRANCH)

          # Generate summary
          echo -e "\nSummary" >> cache_report.txt
          echo "=======" >> cache_report.txt
          echo "Total caches analyzed: $cache_count" >> cache_report.txt
          echo "Caches deleted: $deleted_count" >> cache_report.txt
          echo "Caches protected: $protected_count" >> cache_report.txt
          echo "Caches kept: $kept_count" >> cache_report.txt
          echo "Total cache size: ${total_size_mb}MB" >> cache_report.txt
          echo "Average cache size: ${avg_size_mb}MB" >> cache_report.txt

          # Save metrics for GitHub status
          echo "TOTAL_CACHES=$cache_count" >> $GITHUB_OUTPUT
          echo "DELETED_CACHES=$deleted_count" >> $GITHUB_OUTPUT
          echo "PROTECTED_CACHES=$protected_count" >> $GITHUB_OUTPUT
          echo "KEPT_CACHES=$kept_count" >> $GITHUB_OUTPUT
          echo "TOTAL_SIZE=${total_size_mb}" >> $GITHUB_OUTPUT

          cat cache_report.txt
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Upload Cache Analysis Report
        uses: actions/upload-artifact@v4
        with:
          name: cache-analysis-report
          path: cache_report.txt
          retention-days: 30

      - name: Update Status Check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const total = process.env.TOTAL_CACHES;
            const deleted = process.env.DELETED_CACHES;
            const protectedCount = process.env.PROTECTED_CACHES;
            const kept = process.env.KEPT_CACHES;
            const totalSize = process.env.TOTAL_SIZE;

            const summary = `Cache Cleanup Summary:\n- Total caches: ${total}\n- Deleted: ${deleted}\n- Protected: ${protectedCount}\n- Kept: ${kept}\n- Total size: ${totalSize}MB`;

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Cache Management Status',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',
              completed_at: new Date().toISOString(),
              output: {
                title: 'Cache Cleanup Complete',
                summary: summary
              }
            });
        env:
          TOTAL_CACHES: ${{ steps.cache-cleanup.outputs.TOTAL_CACHES }}
          DELETED_CACHES: ${{ steps.cache-cleanup.outputs.DELETED_CACHES }}
          PROTECTED_CACHES: ${{ steps.cache-cleanup.outputs.PROTECTED_CACHES }}
          KEPT_CACHES: ${{ steps.cache-cleanup.outputs.KEPT_CACHES }}
          TOTAL_SIZE: ${{ steps.cache-cleanup.outputs.TOTAL_SIZE }}

      - name: Create Issue on Large Cache Usage
        if: env.TOTAL_SIZE > 5000
        uses: actions/github-script@v7
        with:
          script: |
            const totalSize = process.env.TOTAL_SIZE;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Large Cache Usage Detected',
              body: `Total cache size (${totalSize}MB) exceeds 5GB threshold.\n\nPlease review the latest cache analysis report for details.\n\nConsider:\n- Reviewing cache retention policies\n- Optimizing build artifacts\n- Cleaning up unused dependencies`
            });
        env:
          TOTAL_SIZE: ${{ steps.cache-cleanup.outputs.TOTAL_SIZE }}
