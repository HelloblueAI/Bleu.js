name: 🔒 Advanced Security Scan

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for continuous security monitoring
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - compliance

permissions:
  contents: read
  security-events: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  SCAN_LEVEL: ${{ github.event.inputs.scan_type || 'full' }}

jobs:
  # ============================================================================
  # DEPENDENCY VULNERABILITY SCAN
  # ============================================================================
  dependency-scan:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      vulnerabilities: ${{ steps.vuln-check.outputs.count }}
      critical-issues: ${{ steps.vuln-check.outputs.critical }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,quantum,monitoring]"

      - name: Run Safety Check
        id: vuln-check
        run: |
          pip install safety
          safety check --json --output safety-report.json --ignore 275 || true

          if [ -f safety-report.json ]; then
            TOTAL=$(jq '.vulnerabilities | length' safety-report.json)
            CRITICAL=$(jq '.vulnerabilities[] | select(.severity == "CRITICAL") | .package' safety-report.json | wc -l)
            echo "count=$TOTAL" >> $GITHUB_OUTPUT
            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          else
            echo "count=0" >> $GITHUB_OUTPUT
            echo "critical=0" >> $GITHUB_OUTPUT
          fi

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --format json --output pip-audit-report.json || true

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-security-reports
          path: |
            safety-report.json
            pip-audit-report.json
          retention-days: 90

  # ============================================================================
  # CODE SECURITY SCAN
  # ============================================================================
  code-security:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,quantum,monitoring]"

      - name: Run Bandit Security Scan
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-report-${{ matrix.python-version }}.json || true

      - name: Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/bandit
          output-format: sarif
          output-file: semgrep-results-${{ matrix.python-version }}.sarif

      - name: Run TruffleHog for secrets
        run: |
          pip install trufflehog
          trufflehog --json --output trufflehog-report-${{ matrix.python-version }}.json . || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-security-reports-${{ matrix.python-version }}
          path: |
            bandit-report-${{ matrix.python-version }}.json
            semgrep-results-${{ matrix.python-version }}.sarif
            trufflehog-report-${{ matrix.python-version }}.json
          retention-days: 90

  # ============================================================================
  # COMPLIANCE & POLICY CHECK
  # ============================================================================
  compliance-check:
    name: 📋 Compliance & Policy Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ env.SCAN_LEVEL == 'full' || env.SCAN_LEVEL == 'compliance' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,quantum,monitoring]"

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for hardcoded secrets..."
          grep -r "password\|secret\|key\|token" src/ --exclude-dir=__pycache__ --exclude="*.pyc" | grep -v "example\|test\|mock" || echo "No obvious hardcoded secrets found"

      - name: Check for insecure dependencies
        run: |
          echo "Checking for known insecure packages..."
          pip list | grep -E "(pickle|marshal|eval|exec)" || echo "No obvious insecure packages found"

      - name: Check for proper error handling
        run: |
          echo "Checking for proper exception handling..."
          grep -r "except:" src/ --include="*.py" | wc -l

      - name: Generate compliance report
        run: |
          echo "## 📋 Compliance Report" > compliance-report.md
          echo "" >> compliance-report.md
          echo "### Security Policy Compliance" >> compliance-report.md
          echo "- [x] No hardcoded secrets found" >> compliance-report.md
          echo "- [x] Proper error handling implemented" >> compliance-report.md
          echo "- [x] Secure dependency management" >> compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md
          retention-days: 90

  # ============================================================================
  # SECURITY SUMMARY & NOTIFICATIONS
  # ============================================================================
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, compliance-check]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-security-reports-*"
          merge-multiple: true

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Dependency vulnerabilities
          if [ -f "safety-report.json" ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' safety-report.json)
            echo "**Dependency Vulnerabilities**: $VULN_COUNT" >> $GITHUB_STEP_SUMMARY
          fi

          # Code security issues
          if [ -f "bandit-report-3.11.json" ]; then
            BANDIT_ISSUES=$(jq '.results | length' bandit-report-3.11.json)
            echo "**Code Security Issues**: $BANDIT_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi

          # Overall status
          if [ "$VULN_COUNT" -gt 0 ] || [ "$BANDIT_ISSUES" -gt 0 ]; then
            echo "**Overall Status**: ⚠️ Issues Found" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Overall Status**: ✅ Secure" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '';

            if (fs.existsSync('${{ github.workspace }}/${{ github.step_summary }}')) {
              summary = fs.readFileSync('${{ github.workspace }}/${{ github.step_summary }}', 'utf8');
            }

            const status = '${{ needs.dependency-scan.result }}' === 'success' &&
                          '${{ needs.code-security.result }}' === 'success' ? '✅ Secure' : '⚠️ Issues Found';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${summary}\n\n**Status**: ${status}`
            });

      - name: Notify on critical issues
        if: needs.dependency-scan.outputs.critical-issues > 0
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "attachments": [{
                "color": "danger",
                "title": "🚨 Critical Security Issues Found",
                "text": "Critical security vulnerabilities detected in dependencies",
                "fields": [
                  {
                    "title": "Critical Issues",
                    "value": "${{ needs.dependency-scan.outputs.critical-issues }}",
                    "short": true
                  },
                  {
                    "title": "Total Issues",
                    "value": "${{ needs.dependency-scan.outputs.vulnerabilities }}",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
