name: Bleu.js Quantum-Enhanced Vision System CI/CD

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/*.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: write
  id-token: write
  security-events: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'
  CACHE_KEY_PREFIX: v1
  PYPI_URL: 'https://upload.pypi.org/legacy/'
  TEST_PYPI_URL: 'https://test.pypi.org/legacy/'
  QUANTUM_BACKENDS: 'qiskit,cirq,pennylane'
  ML_FRAMEWORKS: 'tensorflow,pytorch'

jobs:
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pip
            ~/.cache/poetry
          key: ${{ runner.os }}-${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_KEY_PREFIX }}-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Verify installations
        run: |
          python --version
          poetry --version
          poetry run python -c "import qiskit; print(f'Qiskit version: {qiskit.__version__}')"
          poetry run python -c "import cirq; print(f'Cirq version: {cirq.__version__}')"
          poetry run python -c "import pennylane; print(f'PennyLane version: {pennylane.__version__}')"

  lint:
    name: Lint and Quality Checks
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pip
            ~/.cache/poetry
          key: ${{ runner.os }}-${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Python dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0
        continue-on-error: true

      - name: Format and Check Python Code
        run: |
          poetry run black src/ tests/
          poetry run isort src/ tests/
          git diff --exit-code || (echo "Files were reformatted. Please commit the changes." && exit 1)

      - name: Lint Python with flake8
        run: |
          poetry run flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type Check Python with mypy
        run: poetry run mypy src/ tests/

      - name: Security Check Python with Bandit
        run: poetry run bandit -r src/ -c pyproject.toml

  test:
    name: Test Package
    needs: [lint]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        quantum-backend: ['qiskit', 'cirq', 'pennylane']
        ml-framework: ['tensorflow', 'pytorch']

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pip
            ~/.cache/poetry
          key: ${{ runner.os }}-${{ env.CACHE_KEY_PREFIX }}-${{ matrix.python-version }}-${{ matrix.quantum-backend }}-${{ matrix.ml-framework }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Python dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run Quantum Tests
        env:
          QUANTUM_BACKEND: ${{ matrix.quantum-backend }}
          ML_FRAMEWORK: ${{ matrix.ml-framework }}
        run: |
          poetry run pytest tests/quantum/ \
            --cov=src/quantum/ \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=85 \
            -n auto \
            --verbose

      - name: Run ML Tests
        env:
          ML_FRAMEWORK: ${{ matrix.ml-framework }}
        run: |
          poetry run pytest tests/ml/ \
            --cov=src/ml/ \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=85 \
            -n auto \
            --verbose

      - name: Run Performance Tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          poetry run pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=benchmark.json

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

      - name: Upload Benchmark Results
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.json

      - name: Security Scan - Quantum
        run: |
          poetry run bandit -r src/quantum/ -c pyproject.toml \
            --format json \
            --output quantum-security.json
          
      - name: Security Scan - ML
        run: |
          poetry run bandit -r src/ml/ -c pyproject.toml \
            --format json \
            --output ml-security.json

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            quantum-security.json
            ml-security.json

  benchmark:
    name: Performance Benchmarking
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Run Quantum Benchmarks
        run: |
          poetry run python tests/benchmarks/quantum_benchmark.py
          poetry run python tests/benchmarks/ml_benchmark.py
          poetry run python tests/benchmarks/integration_benchmark.py

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results/
          retention-days: 7

  build:
    name: Build and Deploy
    needs: [benchmark]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Build Python package
        run: poetry build

      - name: Publish to PyPI
        env:
          TWINE_REPOSITORY: pypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

      - name: Publish to Test PyPI
        env:
          TWINE_REPOSITORY: testpypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload --repository testpypi dist/*
