name: Bleu.js CI/CD Pipeline

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/*.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: write
  id-token: write
  security-events: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.8'
  POETRY_VERSION: '1.7.1'
  CACHE_KEY_PREFIX: v1
  PYPI_URL: 'https://upload.pypi.org/legacy/'
  TEST_PYPI_URL: 'https://test.pypi.org/legacy/'

jobs:
  lint:
    name: Lint and Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      - name: Check Code Formatting
        run: |
          poetry run black --check src/ tests/
          poetry run isort --check-only src/ tests/

      - name: Lint with flake8
        run: |
          poetry run flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type Check with mypy
        run: poetry run mypy src/ tests/

      - name: Security Check with Bandit
        run: poetry run bandit -r src/ -c pyproject.toml

  test:
    name: Test Python Package
    needs: [lint]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run Tests
        run: |
          poetry run pytest tests/ \
            --cov=src/ \
            --cov-report=xml \
            --cov-report=html \
            -n auto \
            --junitxml=junit/test-results-${{ matrix.python-version }}.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            junit/
          retention-days: 14

  build:
    name: Build Python Package
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Build Package
        run: poetry build

      - name: Check Package
        run: |
          poetry run twine check dist/*
          poetry run pip install dist/*.whl
          poetry run python -c "import bleujs; print(bleujs.__version__)"

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 14

  security-scan:
    name: Security Scan
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Run Safety Check
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: dist/*.whl

      - name: Run Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  deploy:
    name: Deploy to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    needs: [build, security-scan]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging') &&
      !contains(github.event.head_commit.message, '[skip deploy]')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
      url: ${{ github.ref == 'refs/heads/main' && env.PYPI_URL || env.TEST_PYPI_URL }}
    concurrency: 
      group: deploy-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
      cancel-in-progress: false

    steps:
      - name: Download Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Configure Poetry
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry config pypi-token.testpypi ${{ secrets.PYPI_API_TOKEN }}

      - name: Verify Package
        run: |
          poetry run twine check dist/*
          echo "Package contents:"
          poetry run pip show -f dist/*.whl

      - name: Publish Package
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            poetry publish --repository pypi
          else
            poetry publish --repository testpypi
          fi

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: 'ci-cd-notifications'
          slack-message: 'Job ${{ github.job }} ${{ job.status }} in ${{ github.workflow }} workflow'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
