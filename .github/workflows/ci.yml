name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.10'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]
        include:
          - python-version: 3.10
            qiskit-version: '0.39.5'
            qiskit-aer-version: '0.11.2'
          - python-version: 3.11
            qiskit-version: '0.39.5'
            qiskit-aer-version: '0.11.2'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry==1.7.1

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        poetry run pip install tensorflow
        poetry run pip install "qiskit==${{ matrix.qiskit-version }}"
        poetry run pip install "qiskit-aer==${{ matrix.qiskit-aer-version }}"

    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=./ --cov-report=xml src/python/ml/computer_vision/test_quantum_fusion.py

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: Notify Slack on Test Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [{
              "color": "danger",
              "title": "Tests Failed üö®",
              "text": "Tests failed for Python ${{ matrix.python-version }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit

    - name: Run black
      run: black . --check

    - name: Run isort
      run: isort . --check-only

    - name: Run flake8
      run: flake8 .

    - name: Run mypy
      run: mypy .

    - name: Run bandit
      run: bandit -r .

    - name: Notify Slack on Lint Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [{
              "color": "warning",
              "title": "Code Quality Check Failed ‚ö†Ô∏è",
              "text": "Linting or code quality checks failed\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry==1.7.1
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        poetry install --no-interaction --no-root

    - name: Run Snyk to check for vulnerabilities
      run: |
        npm install -g snyk
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk test --severity-threshold=high || true
      continue-on-error: true

    - name: Notify Slack on Security Issues
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [{
              "color": "danger",
              "title": "Security Check Failed üîí",
              "text": "Security vulnerabilities detected\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to AWS
      run: |
        aws cloudformation deploy \
          --template-file deploy/aws/infrastructure.yml \
          --stack-name bleujs-infrastructure \
          --capabilities CAPABILITY_IAM

    - name: Deploy API
      run: |
        aws cloudformation deploy \
          --template-file deploy/aws/subscriptions.yml \
          --stack-name bleujs-subscriptions \
          --capabilities CAPABILITY_IAM

    - name: Deploy Lambda
      run: |
        aws cloudformation deploy \
          --template-file deploy/aws/subscription_lambda.yml \
          --stack-name bleujs-lambda \
          --capabilities CAPABILITY_IAM

    - name: Notify Slack on Deployment Status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [{
              "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
              "title": "${{ job.status == 'success' && '‚úÖ Deployment Successful' || '‚ùå Deployment Failed' }}",
              "text": "Deployment to AWS ${{ job.status == 'success' && 'completed successfully' || 'failed' }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                },
                {
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
