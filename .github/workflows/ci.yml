name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly dependency check

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.7.1'
  CACHE_VERSION: 'v1'
  DOCKER_BUILDKIT: 1
  ECR_REPOSITORY: bleujs

jobs:
  auto-assign:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: kentaro-m/auto-assign-action@v1.2.0
        with:
          configuration-path: .github/auto-assign.yml

  version-bump:
    needs: auto-assign
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: main

  test:
    needs: [auto-assign, version-bump]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.10, 3.11]
        include:
          - python-version: 3.10
            qiskit-version: '1.1.0'
            qiskit-aer-version: '0.13.0'
          - python-version: 3.11
            qiskit-version: '1.1.0'
            qiskit-aer-version: '0.13.0'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry==${{ env.POETRY_VERSION }}

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        poetry config installer.max-workers 4

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root --with dev
        poetry run pip install "qiskit==${{ matrix.qiskit-version }}"
        poetry run pip install "qiskit-aer==${{ matrix.qiskit-aer-version }}"
        poetry run pip install "cirq==1.3.0"

    - name: Verify dependency versions
      run: |
        poetry run pip check
        poetry run pip freeze | grep -E "black|qiskit|fastapi|starlette"
        poetry run pip show black qiskit fastapi starlette

    - name: Run tests with coverage
      id: coverage
      run: |
        coverage=$(poetry run pytest --cov=./ --cov-report=term-missing \
          src/python/ml/computer_vision/test_quantum_fusion.py \
          src/python/ml/computer_vision/test_quantum_vision.py \
          src/python/tests/test_quantum_enhancer.py \
          src/quantum_py/tests/test_quantum.py \
          tests/quantum/test_quantum_processor.py | grep 'TOTAL' | awk '{print $4}' | sed 's/%//')
        echo "coverage=$coverage" >> $GITHUB_OUTPUT

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.xml
          test-results/
          junit/

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
          **/test-results/
        retention-days: 7

    - name: Notify Slack on Test Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [{
              "color": "danger",
              "title": "Tests Failed 🚨",
              "text": "Tests failed for Python ${{ matrix.python-version }} on ${{ matrix.os }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                },
                {
                  "title": "Test Coverage",
                  "value": "${{ steps.coverage.outputs.coverage }}%",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  lint:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-lint-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry==${{ env.POETRY_VERSION }}

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Run linting tools
      run: |
        poetry run black . --check
        poetry run isort . --check-only
        poetry run flake8 .
        poetry run mypy .
        poetry run bandit -r .

    - name: Notify Slack on Lint Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [{
              "color": "warning",
              "title": "Code Quality Check Failed ⚠️",
              "text": "Linting or code quality checks failed\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-security-${{ env.CACHE_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry==${{ env.POETRY_VERSION }}

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: poetry install --no-interaction --no-root --with dev

    - name: Run Snyk to check for vulnerabilities
      id: security
      run: |
        npm install -g snyk
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk test --severity-threshold=high --json-file-output=snyk-results.json || true
        critical=$(jq -r '.vulnerabilities | map(select(.severity == "critical")) | length' snyk-results.json)
        high=$(jq -r '.vulnerabilities | map(select(.severity == "high")) | length' snyk-results.json)
        echo "critical_issues=$critical" >> $GITHUB_OUTPUT
        echo "high_issues=$high" >> $GITHUB_OUTPUT

    - name: Run dependency check
      run: |
        poetry run pip install safety
        poetry run safety check --full-report --output-file safety-report.json

    - name: Run bandit security scan
      run: |
        poetry run bandit -r . -ll -f json -o bandit-results.json

    - name: Run trivy for container scanning
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Run pip-audit for Python dependencies
      run: |
        poetry run pip install pip-audit
        poetry run pip-audit --format json --output pip-audit-results.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          snyk-results.json
          safety-report.json
          bandit-results.json
          trivy-results.sarif
          pip-audit-results.json
        retention-days: 7

    - name: Notify Slack on Security Issues
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [{
              "color": "danger",
              "title": "Security Check Failed 🔒",
              "text": "Security vulnerabilities detected\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                },
                {
                  "title": "Critical Issues",
                  "value": "${{ steps.security.outputs.critical_issues }}",
                  "short": true
                },
                {
                  "title": "High Issues",
                  "value": "${{ steps.security.outputs.high_issues }}",
                  "short": true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  check-dependencies:
    needs: security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry==${{ env.POETRY_VERSION }}

    - name: Check for outdated dependencies
      run: |
        poetry self update
        poetry show --outdated

    - name: Create Pull Request if updates available
      uses: peter-evans/create-pull-request@v4
      if: failure()
      with:
        title: 'Update Dependencies'
        body: 'Automated dependency updates'
        branch: 'deps/update-$(date +%Y%m%d)'
        commit-message: 'Update dependencies'
        author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
        committer: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
        labels: dependencies

  docker-build-test:
    needs: [auto-assign, version-bump]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and test Docker images
        run: |
          docker build -t bleujs:test .
          docker-compose -f docker-compose.test.yml up -d
          docker-compose -f docker-compose.test.yml ps
          docker-compose -f docker-compose.test.yml logs

      - name: Run Docker tests
        run: |
          docker-compose -f docker-compose.test.yml run test pytest

      - name: Cleanup Docker resources
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  db-migrations:
    needs: docker-build-test
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: pass
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install --no-interaction

      - name: Check database migrations
        run: |
          poetry run python -m alembic current
          poetry run python -m alembic history
          poetry run python -m alembic check

  api-docs:
    needs: db-migrations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install --no-interaction

      - name: Generate API documentation
        run: |
          poetry run python -m pdoc --html --force --output-dir docs/api src/python
          poetry run python -m mkdocs build

      - name: Upload API documentation
        uses: actions/upload-artifact@v3
        with:
          name: api-docs
          path: docs/api/

  performance-test:
    needs: api-docs
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: pass
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install --no-interaction
          pip install locust

      - name: Run performance tests
        run: |
          poetry run locust -f tests/performance/locustfile.py --headless -u 100 -r 10 --run-time 1m --host http://localhost:8000

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: locust-results/

  browser-test:
    needs: performance-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install

      - name: Run browser compatibility tests
        run: |
          pnpm run test:browser

      - name: Upload browser test results
        uses: actions/upload-artifact@v3
        with:
          name: browser-test-results
          path: test-results/

  package-publish:
    needs: [docker-build-test, db-migrations, api-docs, performance-test, browser-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install --no-interaction

      - name: Build Python package
        run: poetry build

      - name: Publish to PyPI
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish --build

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g pnpm
          pnpm install

      - name: Build and publish npm package
        run: |
          pnpm run build
          pnpm publish --access public

  deploy:
    needs: package-publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          aws ecs update-service --cluster bleujs-cluster --service bleujs-service --force-new-deployment

      - name: Notify Slack on Deployment Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            Deployment Status: ${{ job.status }}
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Code Security Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript
