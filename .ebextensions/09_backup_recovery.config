option_settings:
  # Backup Configuration
  aws:elasticbeanstalk:environment:proxy:
    ProxyServer: nginx
    ProxyConnectionSetting: keepalive
    ProxyKeepAliveTimeout: 60
    ProxyKeepAliveMax: 1000

  # S3 Backup Configuration
  aws:elasticbeanstalk:environment:proxy:staticfiles:
    /static: static
    /static/*: static

  # Enhanced Monitoring
  aws:elasticbeanstalk:cloudwatch:logs:
    StreamLogs: true
    DeleteOnTerminate: false
    RetentionInDays: 30
    LogStreamPrefix: "bleujs-"

Resources:
  # Backup Bucket
  AWSEBBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWSEBEnvironmentName}-backup-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldBackups
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 30

  # Backup Policy
  AWSEBBackupPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWSEBEnvironmentName}-backup-policy
      Roles:
        - !Ref AWSEBInstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
              - s3:DeleteObject
            Resource:
              - !Sub arn:aws:s3:::${AWSEBBackupBucket}
              - !Sub arn:aws:s3:::${AWSEBBackupBucket}/*

  # Backup Lambda Function
  AWSEBBackupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWSEBEnvironmentName}-backup
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt AWSEBBackupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          from datetime import datetime

          def handler(event, context):
              s3 = boto3.client('s3')
              backup_bucket = os.environ['BACKUP_BUCKET']

              # Create backup timestamp
              timestamp = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')

              # Backup database
              # Add your database backup logic here

              # Backup application files
              # Add your file backup logic here

              return {
                  'statusCode': 200,
                  'body': json.dumps('Backup completed successfully')
              }
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          BACKUP_BUCKET: !Ref AWSEBBackupBucket

  # Backup Lambda Role
  AWSEBBackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BackupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${AWSEBBackupBucket}
                  - !Sub arn:aws:s3:::${AWSEBBackupBucket}/*

  # Backup Schedule
  AWSEBBackupSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${AWSEBEnvironmentName}-backup-schedule
      Description: Daily backup schedule
      ScheduleExpression: cron(0 0 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt AWSEBBackupFunction.Arn
          Id: BackupFunctionTarget

  # Lambda Permission for EventBridge
  AWSEBBackupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AWSEBBackupFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AWSEBBackupSchedule.Arn
